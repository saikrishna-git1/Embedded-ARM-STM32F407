
stm32f4xx_drivers_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008c4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000a6c  08000a6c  00010a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a7c  08000a7c  00010a84  2**0
                  CONTENTS
  4 .ARM          00000000  08000a7c  08000a7c  00010a84  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a7c  08000a84  00010a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a7c  08000a7c  00010a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a80  08000a80  00010a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010a84  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010a84  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010aae  2**0
                  CONTENTS, READONLY
 14 .debug_info   000010c1  00000000  00000000  00010af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000003e0  00000000  00000000  00011bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000110  00000000  00000000  00011f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000be  00000000  00000000  000120a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000224e  00000000  00000000  00012166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000017f2  00000000  00000000  000143b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000095cd  00000000  00000000  00015ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000364  00000000  00000000  0001f174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0001f4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000a54 	.word	0x08000a54

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000a54 	.word	0x08000a54

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <SPI2_GPIOInit>:
PB13 - SPI2_SCLK
PB12 - SPI2_NSS
Alt fn mode = 5
*/

void SPI2_GPIOInit(void) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPI2_pins;

	SPI2_pins.pGPIOx = GPIOB;
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <SPI2_GPIOInit+0x40>)
 8000200:	607b      	str	r3, [r7, #4]

	SPI2_pins.GPIO_PinConfig.GPIO_PinMODE = GPIO_MODE_ALTFN;
 8000202:	2302      	movs	r3, #2
 8000204:	727b      	strb	r3, [r7, #9]
	SPI2_pins.GPIO_PinConfig.GPIO_PinAF = 5;
 8000206:	2305      	movs	r3, #5
 8000208:	737b      	strb	r3, [r7, #13]
	SPI2_pins.GPIO_PinConfig.GPIO_PinOTYPE = GPIO_OTYPE_PP;
 800020a:	2300      	movs	r3, #0
 800020c:	733b      	strb	r3, [r7, #12]
	SPI2_pins.GPIO_PinConfig.GPIO_PinPUPD = GPIO_PIN_NOPUPD;
 800020e:	2300      	movs	r3, #0
 8000210:	72fb      	strb	r3, [r7, #11]
	SPI2_pins.GPIO_PinConfig.GPIO_PinOSPEED = GPIO_OPSPEED_FAST;
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]

	SPI2_pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13; //SCLK
 8000216:	230d      	movs	r3, #13
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2_pins);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f961 	bl	80004e4 <GPIO_Init>

	SPI2_pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15; //MOSI
 8000222:	230f      	movs	r3, #15
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2_pins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f95b 	bl	80004e4 <GPIO_Init>
	GPIO_Init(&SPI2_pins);

	SPI2_pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12; //NSS
	GPIO_Init(&SPI2_pins);
#endif
}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40020400 	.word	0x40020400

0800023c <SPI2_Init>:


void SPI2_Init(void) {
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2_Handle;

	SPI2_Handle.pSPIx = SPI2;
 8000242:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <SPI2_Init+0x38>)
 8000244:	607b      	str	r3, [r7, #4]
	SPI2_Handle.SPI_Config.SPI_Bus_Config = SPI_FULL_DUPLEX;
 8000246:	2300      	movs	r3, #0
 8000248:	727b      	strb	r3, [r7, #9]
	SPI2_Handle.SPI_Config.SPI_Master_or_Slave = SPI_MASTER;
 800024a:	2301      	movs	r3, #1
 800024c:	723b      	strb	r3, [r7, #8]
	SPI2_Handle.SPI_Config.SPI_Speed = SPI_SCLK_SPEED_DIV_2;
 800024e:	2300      	movs	r3, #0
 8000250:	73bb      	strb	r3, [r7, #14]
	SPI2_Handle.SPI_Config.SPI_DataFrame_Format = SPI_DATA_FF_8BITS;
 8000252:	2300      	movs	r3, #0
 8000254:	72bb      	strb	r3, [r7, #10]
	SPI2_Handle.SPI_Config.SPI_CPOL = SPI_CPOL_0;
 8000256:	2300      	movs	r3, #0
 8000258:	72fb      	strb	r3, [r7, #11]
	SPI2_Handle.SPI_Config.SPI_CPHA = SPI_CPHA_1;
 800025a:	2301      	movs	r3, #1
 800025c:	733b      	strb	r3, [r7, #12]
	SPI2_Handle.SPI_Config.SPI_SSM = SPI_SSM_SW_EN;
 800025e:	2301      	movs	r3, #1
 8000260:	737b      	strb	r3, [r7, #13]
	SPI_Init(&SPI2_Handle);
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fb13 	bl	8000890 <SPI_Init>
}
 800026a:	bf00      	nop
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40003800 	.word	0x40003800

08000278 <main>:


int main(void) {
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0

	char user_data[] = "Hello, world";
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <main+0x40>)
 8000280:	463c      	mov	r4, r7
 8000282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000284:	c407      	stmia	r4!, {r0, r1, r2}
 8000286:	7023      	strb	r3, [r4, #0]

	SPI2_GPIOInit(); //config GPIO pins as SPI2 pins
 8000288:	f7ff ffb6 	bl	80001f8 <SPI2_GPIOInit>

	SPI2_Init(); //SPI2 peripheral configuration
 800028c:	f7ff ffd6 	bl	800023c <SPI2_Init>

	SPI_SSIConfig(SPI2, ENABLE); //makes NSS bit HIGH internally and avoids MODF err
 8000290:	2101      	movs	r1, #1
 8000292:	480a      	ldr	r0, [pc, #40]	; (80002bc <main+0x44>)
 8000294:	f000 fba8 	bl	80009e8 <SPI_SSIConfig>
	SPI_PeriCtrl(SPI2, ENABLE); //Enable SPI2 peri
 8000298:	2101      	movs	r1, #1
 800029a:	4808      	ldr	r0, [pc, #32]	; (80002bc <main+0x44>)
 800029c:	f000 fb93 	bl	80009c6 <SPI_PeriCtrl>

	SPI_Tx_Data(SPI2, (uint8_t *)user_data, strlen(user_data) );
 80002a0:	463b      	mov	r3, r7
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ffa0 	bl	80001e8 <strlen>
 80002a8:	4602      	mov	r2, r0
 80002aa:	463b      	mov	r3, r7
 80002ac:	4619      	mov	r1, r3
 80002ae:	4803      	ldr	r0, [pc, #12]	; (80002bc <main+0x44>)
 80002b0:	f000 fb54 	bl	800095c <SPI_Tx_Data>

	while(1);
 80002b4:	e7fe      	b.n	80002b4 <main+0x3c>
 80002b6:	bf00      	nop
 80002b8:	08000a6c 	.word	0x08000a6c
 80002bc:	40003800 	.word	0x40003800

080002c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c0:	480d      	ldr	r0, [pc, #52]	; (80002f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c8:	480c      	ldr	r0, [pc, #48]	; (80002fc <LoopForever+0x6>)
  ldr r1, =_edata
 80002ca:	490d      	ldr	r1, [pc, #52]	; (8000300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002cc:	4a0d      	ldr	r2, [pc, #52]	; (8000304 <LoopForever+0xe>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d0:	e002      	b.n	80002d8 <LoopCopyDataInit>

080002d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d6:	3304      	adds	r3, #4

080002d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002dc:	d3f9      	bcc.n	80002d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002de:	4a0a      	ldr	r2, [pc, #40]	; (8000308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e0:	4c0a      	ldr	r4, [pc, #40]	; (800030c <LoopForever+0x16>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e4:	e001      	b.n	80002ea <LoopFillZerobss>

080002e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e8:	3204      	adds	r2, #4

080002ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ec:	d3fb      	bcc.n	80002e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ee:	f000 fb8d 	bl	8000a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f2:	f7ff ffc1 	bl	8000278 <main>

080002f6 <LoopForever>:

LoopForever:
  b LoopForever
 80002f6:	e7fe      	b.n	80002f6 <LoopForever>
  ldr   r0, =_estack
 80002f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000300:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000304:	08000a84 	.word	0x08000a84
  ldr r2, =_sbss
 8000308:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800030c:	2000001c 	.word	0x2000001c

08000310 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC_IRQHandler>
	...

08000314 <GPIO_PClk_Ctrl>:
 * @return				- none
 *
 * @Note				- none
 */
void GPIO_PClk_Ctrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	460b      	mov	r3, r1
 800031e:	70fb      	strb	r3, [r7, #3]
	if( EnOrDi == ENABLE ) // ??alt - switch st. and typecasting - onenote
 8000320:	78fb      	ldrb	r3, [r7, #3]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d162      	bne.n	80003ec <GPIO_PClk_Ctrl+0xd8>
	{
			 if(pGPIOx == GPIOA)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4a64      	ldr	r2, [pc, #400]	; (80004bc <GPIO_PClk_Ctrl+0x1a8>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d106      	bne.n	800033c <GPIO_PClk_Ctrl+0x28>
				GPIOA_PCLK_EN();
 800032e:	4b64      	ldr	r3, [pc, #400]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 8000330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000332:	4a63      	ldr	r2, [pc, #396]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6313      	str	r3, [r2, #48]	; 0x30

		 	 else if(pGPIOx == GPIOI)
		 		 GPIOI_PCLK_DI();
	}

}
 800033a:	e0b9      	b.n	80004b0 <GPIO_PClk_Ctrl+0x19c>
		else if(pGPIOx == GPIOB)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a61      	ldr	r2, [pc, #388]	; (80004c4 <GPIO_PClk_Ctrl+0x1b0>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d106      	bne.n	8000352 <GPIO_PClk_Ctrl+0x3e>
				GPIOB_PCLK_EN();
 8000344:	4b5e      	ldr	r3, [pc, #376]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000348:	4a5d      	ldr	r2, [pc, #372]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 800034a:	f043 0302 	orr.w	r3, r3, #2
 800034e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000350:	e0ae      	b.n	80004b0 <GPIO_PClk_Ctrl+0x19c>
		else if(pGPIOx == GPIOC)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a5c      	ldr	r2, [pc, #368]	; (80004c8 <GPIO_PClk_Ctrl+0x1b4>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d106      	bne.n	8000368 <GPIO_PClk_Ctrl+0x54>
				GPIOC_PCLK_EN();
 800035a:	4b59      	ldr	r3, [pc, #356]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 800035c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035e:	4a58      	ldr	r2, [pc, #352]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 8000360:	f043 0304 	orr.w	r3, r3, #4
 8000364:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000366:	e0a3      	b.n	80004b0 <GPIO_PClk_Ctrl+0x19c>
		else if(pGPIOx == GPIOD)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a58      	ldr	r2, [pc, #352]	; (80004cc <GPIO_PClk_Ctrl+0x1b8>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d106      	bne.n	800037e <GPIO_PClk_Ctrl+0x6a>
				GPIOD_PCLK_EN();
 8000370:	4b53      	ldr	r3, [pc, #332]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 8000372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000374:	4a52      	ldr	r2, [pc, #328]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 8000376:	f043 0308 	orr.w	r3, r3, #8
 800037a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037c:	e098      	b.n	80004b0 <GPIO_PClk_Ctrl+0x19c>
		else if(pGPIOx == GPIOE)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a53      	ldr	r2, [pc, #332]	; (80004d0 <GPIO_PClk_Ctrl+0x1bc>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_PClk_Ctrl+0x80>
				GPIOE_PCLK_EN();
 8000386:	4b4e      	ldr	r3, [pc, #312]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038a:	4a4d      	ldr	r2, [pc, #308]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 800038c:	f043 0310 	orr.w	r3, r3, #16
 8000390:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000392:	e08d      	b.n	80004b0 <GPIO_PClk_Ctrl+0x19c>
		else if(pGPIOx == GPIOF)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a4f      	ldr	r2, [pc, #316]	; (80004d4 <GPIO_PClk_Ctrl+0x1c0>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <GPIO_PClk_Ctrl+0x96>
				GPIOF_PCLK_EN();
 800039c:	4b48      	ldr	r3, [pc, #288]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a0:	4a47      	ldr	r2, [pc, #284]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 80003a2:	f043 0320 	orr.w	r3, r3, #32
 80003a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a8:	e082      	b.n	80004b0 <GPIO_PClk_Ctrl+0x19c>
		else if(pGPIOx == GPIOG)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a4a      	ldr	r2, [pc, #296]	; (80004d8 <GPIO_PClk_Ctrl+0x1c4>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_PClk_Ctrl+0xac>
				GPIOG_PCLK_EN();
 80003b2:	4b43      	ldr	r3, [pc, #268]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b6:	4a42      	ldr	r2, [pc, #264]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 80003b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003be:	e077      	b.n	80004b0 <GPIO_PClk_Ctrl+0x19c>
		else if(pGPIOx == GPIOH)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a46      	ldr	r2, [pc, #280]	; (80004dc <GPIO_PClk_Ctrl+0x1c8>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PClk_Ctrl+0xc2>
				GPIOH_PCLK_EN();
 80003c8:	4b3d      	ldr	r3, [pc, #244]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003cc:	4a3c      	ldr	r2, [pc, #240]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 80003ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d4:	e06c      	b.n	80004b0 <GPIO_PClk_Ctrl+0x19c>
		else if(pGPIOx == GPIOI)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a41      	ldr	r2, [pc, #260]	; (80004e0 <GPIO_PClk_Ctrl+0x1cc>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d168      	bne.n	80004b0 <GPIO_PClk_Ctrl+0x19c>
				GPIOI_PCLK_EN();
 80003de:	4b38      	ldr	r3, [pc, #224]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e2:	4a37      	ldr	r2, [pc, #220]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 80003e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ea:	e061      	b.n	80004b0 <GPIO_PClk_Ctrl+0x19c>
		 	 if(pGPIOx == GPIOA)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a33      	ldr	r2, [pc, #204]	; (80004bc <GPIO_PClk_Ctrl+0x1a8>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <GPIO_PClk_Ctrl+0xee>
		 		 GPIOA_PCLK_DI();
 80003f4:	4b32      	ldr	r3, [pc, #200]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f8:	4a31      	ldr	r2, [pc, #196]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 80003fa:	f023 0301 	bic.w	r3, r3, #1
 80003fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000400:	e056      	b.n	80004b0 <GPIO_PClk_Ctrl+0x19c>
		 	 else if(pGPIOx == GPIOB)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a2f      	ldr	r2, [pc, #188]	; (80004c4 <GPIO_PClk_Ctrl+0x1b0>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PClk_Ctrl+0x104>
		 		 GPIOB_PCLK_DI();
 800040a:	4b2d      	ldr	r3, [pc, #180]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040e:	4a2c      	ldr	r2, [pc, #176]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 8000410:	f023 0302 	bic.w	r3, r3, #2
 8000414:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000416:	e04b      	b.n	80004b0 <GPIO_PClk_Ctrl+0x19c>
		 	 else if(pGPIOx == GPIOC)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a2b      	ldr	r2, [pc, #172]	; (80004c8 <GPIO_PClk_Ctrl+0x1b4>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PClk_Ctrl+0x11a>
		 		 GPIOC_PCLK_DI();
 8000420:	4b27      	ldr	r3, [pc, #156]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000424:	4a26      	ldr	r2, [pc, #152]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 8000426:	f023 0304 	bic.w	r3, r3, #4
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042c:	e040      	b.n	80004b0 <GPIO_PClk_Ctrl+0x19c>
		 	 else if(pGPIOx == GPIOD)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a26      	ldr	r2, [pc, #152]	; (80004cc <GPIO_PClk_Ctrl+0x1b8>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d106      	bne.n	8000444 <GPIO_PClk_Ctrl+0x130>
		 		 GPIOD_PCLK_DI();
 8000436:	4b22      	ldr	r3, [pc, #136]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043a:	4a21      	ldr	r2, [pc, #132]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 800043c:	f023 0308 	bic.w	r3, r3, #8
 8000440:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000442:	e035      	b.n	80004b0 <GPIO_PClk_Ctrl+0x19c>
		 	 else if(pGPIOx == GPIOE)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a22      	ldr	r2, [pc, #136]	; (80004d0 <GPIO_PClk_Ctrl+0x1bc>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d106      	bne.n	800045a <GPIO_PClk_Ctrl+0x146>
		 		 GPIOE_PCLK_DI();
 800044c:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 800044e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000450:	4a1b      	ldr	r2, [pc, #108]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 8000452:	f023 0310 	bic.w	r3, r3, #16
 8000456:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000458:	e02a      	b.n	80004b0 <GPIO_PClk_Ctrl+0x19c>
		 	 else if(pGPIOx == GPIOF)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a1d      	ldr	r2, [pc, #116]	; (80004d4 <GPIO_PClk_Ctrl+0x1c0>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d106      	bne.n	8000470 <GPIO_PClk_Ctrl+0x15c>
		 		 GPIOF_PCLK_DI();
 8000462:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 8000464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000466:	4a16      	ldr	r2, [pc, #88]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 8000468:	f023 0320 	bic.w	r3, r3, #32
 800046c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046e:	e01f      	b.n	80004b0 <GPIO_PClk_Ctrl+0x19c>
		 	 else if(pGPIOx == GPIOG)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a19      	ldr	r2, [pc, #100]	; (80004d8 <GPIO_PClk_Ctrl+0x1c4>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d106      	bne.n	8000486 <GPIO_PClk_Ctrl+0x172>
		 		 GPIOG_PCLK_DI();
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 800047a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047c:	4a10      	ldr	r2, [pc, #64]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 800047e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000482:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000484:	e014      	b.n	80004b0 <GPIO_PClk_Ctrl+0x19c>
		 	 else if(pGPIOx == GPIOH)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a14      	ldr	r2, [pc, #80]	; (80004dc <GPIO_PClk_Ctrl+0x1c8>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d106      	bne.n	800049c <GPIO_PClk_Ctrl+0x188>
		 		 GPIOH_PCLK_DI();
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 8000490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000492:	4a0b      	ldr	r2, [pc, #44]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 8000494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000498:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049a:	e009      	b.n	80004b0 <GPIO_PClk_Ctrl+0x19c>
		 	 else if(pGPIOx == GPIOI)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a10      	ldr	r2, [pc, #64]	; (80004e0 <GPIO_PClk_Ctrl+0x1cc>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d105      	bne.n	80004b0 <GPIO_PClk_Ctrl+0x19c>
		 		 GPIOI_PCLK_DI();
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 80004a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a8:	4a05      	ldr	r2, [pc, #20]	; (80004c0 <GPIO_PClk_Ctrl+0x1ac>)
 80004aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40020000 	.word	0x40020000
 80004c0:	40023800 	.word	0x40023800
 80004c4:	40020400 	.word	0x40020400
 80004c8:	40020800 	.word	0x40020800
 80004cc:	40020c00 	.word	0x40020c00
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40021400 	.word	0x40021400
 80004d8:	40021800 	.word	0x40021800
 80004dc:	40021c00 	.word	0x40021c00
 80004e0:	40022000 	.word	0x40022000

080004e4 <GPIO_Init>:
/*
 ***************************** Init & DeInit *****************************
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) // initialize the GPIOx peri // takes pointer to the handle struct
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]

	//Enable the peri clk
	GPIO_PClk_Ctrl(pGPIOHandle->pGPIOx, ENABLE);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2101      	movs	r1, #1
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ff0c 	bl	8000314 <GPIO_PClk_Ctrl>

	// 1. config the mode of GPIO pin
	if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMODE <= GPIO_MODE_ANALOG ) { // non-interrupt mode
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	795b      	ldrb	r3, [r3, #5]
 8000500:	2b03      	cmp	r3, #3
 8000502:	d820      	bhi.n	8000546 <GPIO_Init+0x62>
		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMODE << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) ); // storing the MODE value into 'temp' after left-shifting it to the corresponding pin number // every pin has 2 MODER bits
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	795b      	ldrb	r3, [r3, #5]
 8000508:	461a      	mov	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	791b      	ldrb	r3, [r3, #4]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	fa02 f303 	lsl.w	r3, r2, r3
 8000514:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) ); // clearing the corresponding MODER bits using 0x3 as the mask
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	791b      	ldrb	r3, [r3, #4]
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	2103      	movs	r1, #3
 8000524:	fa01 f303 	lsl.w	r3, r1, r3
 8000528:	43db      	mvns	r3, r3
 800052a:	4619      	mov	r1, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	400a      	ands	r2, r1
 8000532:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting the corresponding MODER bits
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6819      	ldr	r1, [r3, #0]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	697a      	ldr	r2, [r7, #20]
 8000540:	430a      	orrs	r2, r1
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	e0a1      	b.n	800068a <GPIO_Init+0x1a6>
	}
	else {	// Custom interrupt modes - not defined in Reference Manual
		if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMODE == GPIO_MODE_IT_FT ) {
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	795b      	ldrb	r3, [r3, #5]
 800054a:	2b04      	cmp	r3, #4
 800054c:	d117      	bne.n	800057e <GPIO_Init+0x9a>
			//1. config FTSR and clear RTSR
			EXTI->EXTI_FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800054e:	4b9b      	ldr	r3, [pc, #620]	; (80007bc <GPIO_Init+0x2d8>)
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	7912      	ldrb	r2, [r2, #4]
 8000556:	4611      	mov	r1, r2
 8000558:	2201      	movs	r2, #1
 800055a:	408a      	lsls	r2, r1
 800055c:	4611      	mov	r1, r2
 800055e:	4a97      	ldr	r2, [pc, #604]	; (80007bc <GPIO_Init+0x2d8>)
 8000560:	430b      	orrs	r3, r1
 8000562:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR &=~ ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000564:	4b95      	ldr	r3, [pc, #596]	; (80007bc <GPIO_Init+0x2d8>)
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	7912      	ldrb	r2, [r2, #4]
 800056c:	4611      	mov	r1, r2
 800056e:	2201      	movs	r2, #1
 8000570:	408a      	lsls	r2, r1
 8000572:	43d2      	mvns	r2, r2
 8000574:	4611      	mov	r1, r2
 8000576:	4a91      	ldr	r2, [pc, #580]	; (80007bc <GPIO_Init+0x2d8>)
 8000578:	400b      	ands	r3, r1
 800057a:	6093      	str	r3, [r2, #8]
 800057c:	e035      	b.n	80005ea <GPIO_Init+0x106>
		}
		else if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMODE == GPIO_MODE_IT_RT ) {
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	795b      	ldrb	r3, [r3, #5]
 8000582:	2b05      	cmp	r3, #5
 8000584:	d117      	bne.n	80005b6 <GPIO_Init+0xd2>
			//1. config RTSR and clear FTSR
			EXTI->EXTI_RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000586:	4b8d      	ldr	r3, [pc, #564]	; (80007bc <GPIO_Init+0x2d8>)
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	7912      	ldrb	r2, [r2, #4]
 800058e:	4611      	mov	r1, r2
 8000590:	2201      	movs	r2, #1
 8000592:	408a      	lsls	r2, r1
 8000594:	4611      	mov	r1, r2
 8000596:	4a89      	ldr	r2, [pc, #548]	; (80007bc <GPIO_Init+0x2d8>)
 8000598:	430b      	orrs	r3, r1
 800059a:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR &=~ ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800059c:	4b87      	ldr	r3, [pc, #540]	; (80007bc <GPIO_Init+0x2d8>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	7912      	ldrb	r2, [r2, #4]
 80005a4:	4611      	mov	r1, r2
 80005a6:	2201      	movs	r2, #1
 80005a8:	408a      	lsls	r2, r1
 80005aa:	43d2      	mvns	r2, r2
 80005ac:	4611      	mov	r1, r2
 80005ae:	4a83      	ldr	r2, [pc, #524]	; (80007bc <GPIO_Init+0x2d8>)
 80005b0:	400b      	ands	r3, r1
 80005b2:	60d3      	str	r3, [r2, #12]
 80005b4:	e019      	b.n	80005ea <GPIO_Init+0x106>
		}
		else if ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMODE == GPIO_MODE_IT_RFT ) {
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	795b      	ldrb	r3, [r3, #5]
 80005ba:	2b06      	cmp	r3, #6
 80005bc:	d115      	bne.n	80005ea <GPIO_Init+0x106>
			//1. config both FTSR and RTSR
			EXTI->EXTI_RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005be:	4b7f      	ldr	r3, [pc, #508]	; (80007bc <GPIO_Init+0x2d8>)
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	7912      	ldrb	r2, [r2, #4]
 80005c6:	4611      	mov	r1, r2
 80005c8:	2201      	movs	r2, #1
 80005ca:	408a      	lsls	r2, r1
 80005cc:	4611      	mov	r1, r2
 80005ce:	4a7b      	ldr	r2, [pc, #492]	; (80007bc <GPIO_Init+0x2d8>)
 80005d0:	430b      	orrs	r3, r1
 80005d2:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005d4:	4b79      	ldr	r3, [pc, #484]	; (80007bc <GPIO_Init+0x2d8>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	7912      	ldrb	r2, [r2, #4]
 80005dc:	4611      	mov	r1, r2
 80005de:	2201      	movs	r2, #1
 80005e0:	408a      	lsls	r2, r1
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a75      	ldr	r2, [pc, #468]	; (80007bc <GPIO_Init+0x2d8>)
 80005e6:	430b      	orrs	r3, r1
 80005e8:	60d3      	str	r3, [r2, #12]
		}

		//2. config SYSCFG_EXTICR for GPIO port selection
		uint8_t temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	089b      	lsrs	r3, r3, #2
 80005f0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	f003 0303 	and.w	r3, r3, #3
 80005fa:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIOBASE_TO_PORTCODE(pGPIOHandle->pGPIOx);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a6f      	ldr	r2, [pc, #444]	; (80007c0 <GPIO_Init+0x2dc>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d024      	beq.n	8000650 <GPIO_Init+0x16c>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a6e      	ldr	r2, [pc, #440]	; (80007c4 <GPIO_Init+0x2e0>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d01d      	beq.n	800064c <GPIO_Init+0x168>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a6c      	ldr	r2, [pc, #432]	; (80007c8 <GPIO_Init+0x2e4>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d016      	beq.n	8000648 <GPIO_Init+0x164>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a6b      	ldr	r2, [pc, #428]	; (80007cc <GPIO_Init+0x2e8>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d00f      	beq.n	8000644 <GPIO_Init+0x160>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a69      	ldr	r2, [pc, #420]	; (80007d0 <GPIO_Init+0x2ec>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d008      	beq.n	8000640 <GPIO_Init+0x15c>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a68      	ldr	r2, [pc, #416]	; (80007d4 <GPIO_Init+0x2f0>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d101      	bne.n	800063c <GPIO_Init+0x158>
 8000638:	2305      	movs	r3, #5
 800063a:	e00a      	b.n	8000652 <GPIO_Init+0x16e>
 800063c:	2300      	movs	r3, #0
 800063e:	e008      	b.n	8000652 <GPIO_Init+0x16e>
 8000640:	2304      	movs	r3, #4
 8000642:	e006      	b.n	8000652 <GPIO_Init+0x16e>
 8000644:	2303      	movs	r3, #3
 8000646:	e004      	b.n	8000652 <GPIO_Init+0x16e>
 8000648:	2302      	movs	r3, #2
 800064a:	e002      	b.n	8000652 <GPIO_Init+0x16e>
 800064c:	2301      	movs	r3, #1
 800064e:	e000      	b.n	8000652 <GPIO_Init+0x16e>
 8000650:	2300      	movs	r3, #0
 8000652:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000654:	4b60      	ldr	r3, [pc, #384]	; (80007d8 <GPIO_Init+0x2f4>)
 8000656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000658:	4a5f      	ldr	r2, [pc, #380]	; (80007d8 <GPIO_Init+0x2f4>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->SYSCFG_EXTICR[temp] = ( portCode << (temp2*4) );
 8000660:	7c7a      	ldrb	r2, [r7, #17]
 8000662:	7cbb      	ldrb	r3, [r7, #18]
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	fa02 f103 	lsl.w	r1, r2, r3
 800066a:	4a5c      	ldr	r2, [pc, #368]	; (80007dc <GPIO_Init+0x2f8>)
 800066c:	7cfb      	ldrb	r3, [r7, #19]
 800066e:	3302      	adds	r3, #2
 8000670:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable EXTI intr delivery using IMR
		EXTI->EXTI_IMR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000674:	4b51      	ldr	r3, [pc, #324]	; (80007bc <GPIO_Init+0x2d8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	7912      	ldrb	r2, [r2, #4]
 800067c:	4611      	mov	r1, r2
 800067e:	2201      	movs	r2, #1
 8000680:	408a      	lsls	r2, r1
 8000682:	4611      	mov	r1, r2
 8000684:	4a4d      	ldr	r2, [pc, #308]	; (80007bc <GPIO_Init+0x2d8>)
 8000686:	430b      	orrs	r3, r1
 8000688:	6013      	str	r3, [r2, #0]
	}

	// 2. config o/p speed
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOSPEED << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) ); // storing the OSPEED value into 'temp' after left-shifting it to the corresponding pin number // every pin has 2 OSPEEDR bits
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	799b      	ldrb	r3, [r3, #6]
 800068e:	461a      	mov	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	791b      	ldrb	r3, [r3, #4]
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	fa02 f303 	lsl.w	r3, r2, r3
 800069a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	689a      	ldr	r2, [r3, #8]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	791b      	ldrb	r3, [r3, #4]
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	2103      	movs	r1, #3
 80006aa:	fa01 f303 	lsl.w	r3, r1, r3
 80006ae:	43db      	mvns	r3, r3
 80006b0:	4619      	mov	r1, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	400a      	ands	r2, r1
 80006b8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	6899      	ldr	r1, [r3, #8]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	697a      	ldr	r2, [r7, #20]
 80006c6:	430a      	orrs	r2, r1
 80006c8:	609a      	str	r2, [r3, #8]

	// 3. config PuPd settings
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinPUPD << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) ); // storing the PUPD value into 'temp' after left-shifting it to the corresponding pin number // every pin has 2 PUPDR bits
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	79db      	ldrb	r3, [r3, #7]
 80006ce:	461a      	mov	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791b      	ldrb	r3, [r3, #4]
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	68da      	ldr	r2, [r3, #12]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	2103      	movs	r1, #3
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	43db      	mvns	r3, r3
 80006f0:	4619      	mov	r1, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	400a      	ands	r2, r1
 80006f8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	68d9      	ldr	r1, [r3, #12]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	430a      	orrs	r2, r1
 8000708:	60da      	str	r2, [r3, #12]

	// 4. config o/p type
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOTYPE << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ); // storing the OTYPE value into 'temp' after left-shifting it to the corresponding pin number // every pin has 1 OTYPER bit
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	7a1b      	ldrb	r3, [r3, #8]
 800070e:	461a      	mov	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	791b      	ldrb	r3, [r3, #4]
 8000714:	fa02 f303 	lsl.w	r3, r2, r3
 8000718:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	685a      	ldr	r2, [r3, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	791b      	ldrb	r3, [r3, #4]
 8000724:	4619      	mov	r1, r3
 8000726:	2301      	movs	r3, #1
 8000728:	408b      	lsls	r3, r1
 800072a:	43db      	mvns	r3, r3
 800072c:	4619      	mov	r1, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	400a      	ands	r2, r1
 8000734:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	6859      	ldr	r1, [r3, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	697a      	ldr	r2, [r7, #20]
 8000742:	430a      	orrs	r2, r1
 8000744:	605a      	str	r2, [r3, #4]

	// 5. config alt. func. (if required) // valid only if PinMODE = AF mode, config with the value in var PinAF
	if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMODE == GPIO_MODE_ALTFN )
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	795b      	ldrb	r3, [r3, #5]
 800074a:	2b02      	cmp	r3, #2
 800074c:	d131      	bne.n	80007b2 <GPIO_Init+0x2ce>
	{
		// config alt. func. regs
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	791b      	ldrb	r3, [r3, #4]
 8000752:	08db      	lsrs	r3, r3, #3
 8000754:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	791b      	ldrb	r3, [r3, #4]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << ( 4 * temp2 ) ); //clearing - 4 bits per pin
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	7c3a      	ldrb	r2, [r7, #16]
 8000766:	3208      	adds	r2, #8
 8000768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	220f      	movs	r2, #15
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	43db      	mvns	r3, r3
 8000778:	4618      	mov	r0, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	7c3a      	ldrb	r2, [r7, #16]
 8000780:	4001      	ands	r1, r0
 8000782:	3208      	adds	r2, #8
 8000784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAF << ( 4 * temp2 ) ); //setting
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	7c3a      	ldrb	r2, [r7, #16]
 800078e:	3208      	adds	r2, #8
 8000790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	7a5b      	ldrb	r3, [r3, #9]
 8000798:	461a      	mov	r2, r3
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	4618      	mov	r0, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	7c3a      	ldrb	r2, [r7, #16]
 80007aa:	4301      	orrs	r1, r0
 80007ac:	3208      	adds	r2, #8
 80007ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80007b2:	bf00      	nop
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40013c00 	.word	0x40013c00
 80007c0:	40020000 	.word	0x40020000
 80007c4:	40020400 	.word	0x40020400
 80007c8:	40020800 	.word	0x40020800
 80007cc:	40020c00 	.word	0x40020c00
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40021400 	.word	0x40021400
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40013800 	.word	0x40013800

080007e0 <SPI_PClk_Ctrl>:
 */

#include "stm32f407xx_spi_driver.h"


void SPI_PClk_Ctrl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi) {
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	70fb      	strb	r3, [r7, #3]
	if( EnOrDi == ENABLE ) { // ??alt - switch st. and typecasting - onenote
 80007ec:	78fb      	ldrb	r3, [r7, #3]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d120      	bne.n	8000834 <SPI_PClk_Ctrl+0x54>
			if(pSPIx == SPI1)	SPI1_PCLK_EN();
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a22      	ldr	r2, [pc, #136]	; (8000880 <SPI_PClk_Ctrl+0xa0>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d106      	bne.n	8000808 <SPI_PClk_Ctrl+0x28>
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <SPI_PClk_Ctrl+0xa4>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	4a21      	ldr	r2, [pc, #132]	; (8000884 <SPI_PClk_Ctrl+0xa4>)
 8000800:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000804:	6453      	str	r3, [r2, #68]	; 0x44
			if(pSPIx == SPI1)	SPI1_PCLK_DI();
		else if(pSPIx == SPI2)	SPI2_PCLK_DI();
		else if(pSPIx == SPI3)	SPI3_PCLK_DI();
		//else if(pSPIx == SPI4) 	SPI4_PCLK_DI();
	}
}
 8000806:	e035      	b.n	8000874 <SPI_PClk_Ctrl+0x94>
		else if(pSPIx == SPI2)	SPI2_PCLK_EN();
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a1f      	ldr	r2, [pc, #124]	; (8000888 <SPI_PClk_Ctrl+0xa8>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d106      	bne.n	800081e <SPI_PClk_Ctrl+0x3e>
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <SPI_PClk_Ctrl+0xa4>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <SPI_PClk_Ctrl+0xa4>)
 8000816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800081c:	e02a      	b.n	8000874 <SPI_PClk_Ctrl+0x94>
		else if(pSPIx == SPI3)	SPI3_PCLK_EN();
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a1a      	ldr	r2, [pc, #104]	; (800088c <SPI_PClk_Ctrl+0xac>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d126      	bne.n	8000874 <SPI_PClk_Ctrl+0x94>
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <SPI_PClk_Ctrl+0xa4>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a16      	ldr	r2, [pc, #88]	; (8000884 <SPI_PClk_Ctrl+0xa4>)
 800082c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000832:	e01f      	b.n	8000874 <SPI_PClk_Ctrl+0x94>
			if(pSPIx == SPI1)	SPI1_PCLK_DI();
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <SPI_PClk_Ctrl+0xa0>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d106      	bne.n	800084a <SPI_PClk_Ctrl+0x6a>
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <SPI_PClk_Ctrl+0xa4>)
 800083e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000840:	4a10      	ldr	r2, [pc, #64]	; (8000884 <SPI_PClk_Ctrl+0xa4>)
 8000842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000846:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000848:	e014      	b.n	8000874 <SPI_PClk_Ctrl+0x94>
		else if(pSPIx == SPI2)	SPI2_PCLK_DI();
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <SPI_PClk_Ctrl+0xa8>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d106      	bne.n	8000860 <SPI_PClk_Ctrl+0x80>
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <SPI_PClk_Ctrl+0xa4>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <SPI_PClk_Ctrl+0xa4>)
 8000858:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800085e:	e009      	b.n	8000874 <SPI_PClk_Ctrl+0x94>
		else if(pSPIx == SPI3)	SPI3_PCLK_DI();
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <SPI_PClk_Ctrl+0xac>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d105      	bne.n	8000874 <SPI_PClk_Ctrl+0x94>
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <SPI_PClk_Ctrl+0xa4>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	4a05      	ldr	r2, [pc, #20]	; (8000884 <SPI_PClk_Ctrl+0xa4>)
 800086e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000872:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40013000 	.word	0x40013000
 8000884:	40023800 	.word	0x40023800
 8000888:	40003800 	.word	0x40003800
 800088c:	40003c00 	.word	0x40003c00

08000890 <SPI_Init>:


void SPI_Init(SPI_Handle_t *pSPI_Handle) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	//Enable peri clk
	SPI_PClk_Ctrl(pSPI_Handle->pSPIx, ENABLE);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2101      	movs	r1, #1
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ff9e 	bl	80007e0 <SPI_PClk_Ctrl>

	//1. configure SPI_CR1 register
	uint32_t temp = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]

	//1.1. Configure device mode - Master/Slave
	temp |= pSPI_Handle->SPI_Config.SPI_Master_or_Slave << 2;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	791b      	ldrb	r3, [r3, #4]
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	461a      	mov	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]

	//1.2 Configure bus config
	if(pSPI_Handle->SPI_Config.SPI_Bus_Config == SPI_FULL_DUPLEX) {
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	795b      	ldrb	r3, [r3, #5]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d104      	bne.n	80008c8 <SPI_Init+0x38>
		//bidi mode should be cleared
		temp &= ~(1 << 15);
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	e014      	b.n	80008f2 <SPI_Init+0x62>
	}
	else if(pSPI_Handle->SPI_Config.SPI_Bus_Config == SPI_HALF_DUPLEX) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	795b      	ldrb	r3, [r3, #5]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d104      	bne.n	80008da <SPI_Init+0x4a>
		//bidi mode should be set
		temp |= (1 << 15);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	e00b      	b.n	80008f2 <SPI_Init+0x62>
	}
	else if(pSPI_Handle->SPI_Config.SPI_Bus_Config == SPI_SIMPLEX_RX_ONLY) {
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	795b      	ldrb	r3, [r3, #5]
 80008de:	2b03      	cmp	r3, #3
 80008e0:	d107      	bne.n	80008f2 <SPI_Init+0x62>
		//bidi mode should be cleared
		temp &= ~(1 << 15);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008e8:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		temp |= (1 << 10);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008f0:	60fb      	str	r3, [r7, #12]
	}

	//1.3 Config SPI serial clk speed (baud rate)
	temp |= pSPI_Handle->SPI_Config.SPI_Speed << 3;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	7a9b      	ldrb	r3, [r3, #10]
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	461a      	mov	r2, r3
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]

	//1.4 Config DataFrameFormat
	temp |= pSPI_Handle->SPI_Config.SPI_DataFrame_Format << 11;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	799b      	ldrb	r3, [r3, #6]
 8000904:	02db      	lsls	r3, r3, #11
 8000906:	461a      	mov	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	4313      	orrs	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]

	//1.5 Config CPOL
	temp |= pSPI_Handle->SPI_Config.SPI_CPOL << 1;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	79db      	ldrb	r3, [r3, #7]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	461a      	mov	r2, r3
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	4313      	orrs	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]

	//1.6 Config CPHA
	temp |= pSPI_Handle->SPI_Config.SPI_CPHA << 0;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	7a1b      	ldrb	r3, [r3, #8]
 8000920:	461a      	mov	r2, r3
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	4313      	orrs	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]

	//1.7 Config SSM
	temp |= pSPI_Handle->SPI_Config.SPI_SSM << 9;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	7a5b      	ldrb	r3, [r3, #9]
 800092c:	025b      	lsls	r3, r3, #9
 800092e:	461a      	mov	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4313      	orrs	r3, r2
 8000934:	60fb      	str	r3, [r7, #12]

	pSPI_Handle->pSPIx->SPI_CR1 = temp;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	601a      	str	r2, [r3, #0]
}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <SPI_GetStatusReg>:



uint32_t SPI_GetStatusReg(SPI_RegDef_t *pSPIx) {
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
	return pSPIx->SPI_SR;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	689b      	ldr	r3, [r3, #8]
}
 8000952:	4618      	mov	r0, r3
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <SPI_Tx_Data>:



void SPI_Tx_Data(SPI_RegDef_t *pSPIx, uint8_t *pTx_Buff, uint32_t len) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
	while(len > 0) {
 8000968:	e025      	b.n	80009b6 <SPI_Tx_Data+0x5a>
		//1. wait until TXE is set
		while( (SPI_GetStatusReg(pSPIx) & (1 << 1) )== 0 ); //query TXE flag status
 800096a:	bf00      	nop
 800096c:	68f8      	ldr	r0, [r7, #12]
 800096e:	f7ff ffea 	bl	8000946 <SPI_GetStatusReg>
 8000972:	4603      	mov	r3, r0
 8000974:	f003 0302 	and.w	r3, r3, #2
 8000978:	2b00      	cmp	r3, #0
 800097a:	d0f7      	beq.n	800096c <SPI_Tx_Data+0x10>

		//2. Check DataFrameFormat, tx data, incr Tx_Buff addr, decr len
		if( (pSPIx->SPI_CR1 & (1 << 11) ) == SPI_DATA_FF_8BITS) {
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000984:	2b00      	cmp	r3, #0
 8000986:	d10b      	bne.n	80009a0 <SPI_Tx_Data+0x44>
			pSPIx->SPI_DR = *pTx_Buff;
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	60da      	str	r2, [r3, #12]
			pTx_Buff++;
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	3301      	adds	r3, #1
 8000996:	60bb      	str	r3, [r7, #8]
			len--;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	e00a      	b.n	80009b6 <SPI_Tx_Data+0x5a>
		}
		else {
			pSPIx->SPI_DR = *((uint16_t *) pTx_Buff);
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	60da      	str	r2, [r3, #12]
			pTx_Buff+=2;
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	3302      	adds	r3, #2
 80009ae:	60bb      	str	r3, [r7, #8]
			len-=2;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b02      	subs	r3, #2
 80009b4:	607b      	str	r3, [r7, #4]
	while(len > 0) {
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1d6      	bne.n	800096a <SPI_Tx_Data+0xe>
		}
	}
}
 80009bc:	bf00      	nop
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <SPI_PeriCtrl>:



void SPI_PeriCtrl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi) {
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	460b      	mov	r3, r1
 80009d0:	70fb      	strb	r3, [r7, #3]
	if(ENABLE) {
		pSPIx->SPI_CR1 |= (1 << 6);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	601a      	str	r2, [r3, #0]
	}
	else {
		pSPIx->SPI_CR1 &=~ (1 << 6);
	}
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <SPI_SSIConfig>:



void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi) {
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
	if(ENABLE) {
		pSPIx->SPI_CR1 |= (1 << 8);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	601a      	str	r2, [r3, #0]
	}
	else {
		pSPIx->SPI_CR1 &=~ (1 << 8);
	}
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
	...

08000a0c <__libc_init_array>:
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	4d0d      	ldr	r5, [pc, #52]	; (8000a44 <__libc_init_array+0x38>)
 8000a10:	4c0d      	ldr	r4, [pc, #52]	; (8000a48 <__libc_init_array+0x3c>)
 8000a12:	1b64      	subs	r4, r4, r5
 8000a14:	10a4      	asrs	r4, r4, #2
 8000a16:	2600      	movs	r6, #0
 8000a18:	42a6      	cmp	r6, r4
 8000a1a:	d109      	bne.n	8000a30 <__libc_init_array+0x24>
 8000a1c:	4d0b      	ldr	r5, [pc, #44]	; (8000a4c <__libc_init_array+0x40>)
 8000a1e:	4c0c      	ldr	r4, [pc, #48]	; (8000a50 <__libc_init_array+0x44>)
 8000a20:	f000 f818 	bl	8000a54 <_init>
 8000a24:	1b64      	subs	r4, r4, r5
 8000a26:	10a4      	asrs	r4, r4, #2
 8000a28:	2600      	movs	r6, #0
 8000a2a:	42a6      	cmp	r6, r4
 8000a2c:	d105      	bne.n	8000a3a <__libc_init_array+0x2e>
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a34:	4798      	blx	r3
 8000a36:	3601      	adds	r6, #1
 8000a38:	e7ee      	b.n	8000a18 <__libc_init_array+0xc>
 8000a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a3e:	4798      	blx	r3
 8000a40:	3601      	adds	r6, #1
 8000a42:	e7f2      	b.n	8000a2a <__libc_init_array+0x1e>
 8000a44:	08000a7c 	.word	0x08000a7c
 8000a48:	08000a7c 	.word	0x08000a7c
 8000a4c:	08000a7c 	.word	0x08000a7c
 8000a50:	08000a80 	.word	0x08000a80

08000a54 <_init>:
 8000a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a56:	bf00      	nop
 8000a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a5a:	bc08      	pop	{r3}
 8000a5c:	469e      	mov	lr, r3
 8000a5e:	4770      	bx	lr

08000a60 <_fini>:
 8000a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a62:	bf00      	nop
 8000a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a66:	bc08      	pop	{r3}
 8000a68:	469e      	mov	lr, r3
 8000a6a:	4770      	bx	lr
