
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000648  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007f0  080007f8  000107f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007f0  080007f0  000107f8  2**0
                  CONTENTS
  4 .ARM          00000000  080007f0  080007f0  000107f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007f0  080007f8  000107f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007f0  080007f0  000107f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007f4  080007f4  000107f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000107f8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000107f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010822  2**0
                  CONTENTS, READONLY
 14 .debug_info   000009ef  00000000  00000000  00010865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000027e  00000000  00000000  00011254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000c0  00000000  00000000  000114d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000085  00000000  00000000  00011598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000015ca  00000000  00000000  0001161d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000fa5  00000000  00000000  00012be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00005de3  00000000  00000000  00013b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000024c  00000000  00000000  00019970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00019bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080007d8 	.word	0x080007d8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080007d8 	.word	0x080007d8

080001e8 <delay>:
 */

#include <stm32f407xx.h> // device-specific header file
// #include <stm32f407xx_gpio_driver.h> // included in <stm32f407xx.h> - device-specific header file

void delay() {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<500000; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	0007a11f 	.word	0x0007a11f

08000214 <main>:

int main()	{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed; // first create a variable for GPIO handle

	GpioLed.pGPIOx = GPIOD; // select the port
 800021a:	4b0d      	ldr	r3, [pc, #52]	; (8000250 <main+0x3c>)
 800021c:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 800021e:	230c      	movs	r3, #12
 8000220:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinMODE = GPIO_MODE_OUT;
 8000222:	2301      	movs	r3, #1
 8000224:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinOSPEED = GPIO_OPSPEED_FAST;
 8000226:	2302      	movs	r3, #2
 8000228:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOTYPE = GPIO_OTYPE_PP; // use push-pull unless open-drain is really required
 800022a:	2300      	movs	r3, #0
 800022c:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPUPD = GPIO_PIN_NOPUPD;
 800022e:	2300      	movs	r3, #0
 8000230:	72fb      	strb	r3, [r7, #11]
	//GpioLed.GPIO_PinConfig.GPIO_PinOTYPE = GPIO_OTYPE_OD;
	//GpioLed.GPIO_PinConfig.GPIO_PinPUPD = GPIO_PIN_NOPUPD; // int. PU resistor value too high (40Kohms), so use ext. PU resistor

	GPIO_PClk_Ctrl(GPIOD, ENABLE);
 8000232:	2101      	movs	r1, #1
 8000234:	4806      	ldr	r0, [pc, #24]	; (8000250 <main+0x3c>)
 8000236:	f000 f837 	bl	80002a8 <GPIO_PClk_Ctrl>

	// calling API - GPIO_Init
	GPIO_Init(&GpioLed);
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	4618      	mov	r0, r3
 800023e:	f000 f91b 	bl	8000478 <GPIO_Init>

	while(1) {
		GPIO_ToggleOp_Pin(GPIOD, GPIO_PIN_12);
 8000242:	210c      	movs	r1, #12
 8000244:	4802      	ldr	r0, [pc, #8]	; (8000250 <main+0x3c>)
 8000246:	f000 fa8f 	bl	8000768 <GPIO_ToggleOp_Pin>
		delay();
 800024a:	f7ff ffcd 	bl	80001e8 <delay>
		GPIO_ToggleOp_Pin(GPIOD, GPIO_PIN_12);
 800024e:	e7f8      	b.n	8000242 <main+0x2e>
 8000250:	40020c00 	.word	0x40020c00

08000254 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000254:	480d      	ldr	r0, [pc, #52]	; (800028c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000256:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000258:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800025c:	480c      	ldr	r0, [pc, #48]	; (8000290 <LoopForever+0x6>)
  ldr r1, =_edata
 800025e:	490d      	ldr	r1, [pc, #52]	; (8000294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000260:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <LoopForever+0xe>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000264:	e002      	b.n	800026c <LoopCopyDataInit>

08000266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026a:	3304      	adds	r3, #4

0800026c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800026c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000270:	d3f9      	bcc.n	8000266 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000272:	4a0a      	ldr	r2, [pc, #40]	; (800029c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000274:	4c0a      	ldr	r4, [pc, #40]	; (80002a0 <LoopForever+0x16>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000278:	e001      	b.n	800027e <LoopFillZerobss>

0800027a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800027c:	3204      	adds	r2, #4

0800027e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000280:	d3fb      	bcc.n	800027a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000282:	f000 fa85 	bl	8000790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000286:	f7ff ffc5 	bl	8000214 <main>

0800028a <LoopForever>:

LoopForever:
    b LoopForever
 800028a:	e7fe      	b.n	800028a <LoopForever>
  ldr   r0, =_estack
 800028c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000294:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000298:	080007f8 	.word	0x080007f8
  ldr r2, =_sbss
 800029c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a0:	2000001c 	.word	0x2000001c

080002a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a4:	e7fe      	b.n	80002a4 <ADC_IRQHandler>
	...

080002a8 <GPIO_PClk_Ctrl>:
 * @return				- none
 *
 * @Note				- none
 */
void GPIO_PClk_Ctrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	70fb      	strb	r3, [r7, #3]
	if( EnOrDi == ENABLE ) // ??alt - switch st. and typecasting - onenote
 80002b4:	78fb      	ldrb	r3, [r7, #3]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d162      	bne.n	8000380 <GPIO_PClk_Ctrl+0xd8>
	{
			 if(pGPIOx == GPIOA)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a64      	ldr	r2, [pc, #400]	; (8000450 <GPIO_PClk_Ctrl+0x1a8>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d106      	bne.n	80002d0 <GPIO_PClk_Ctrl+0x28>
				GPIOA_PCLK_EN();
 80002c2:	4b64      	ldr	r3, [pc, #400]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c6:	4a63      	ldr	r2, [pc, #396]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6313      	str	r3, [r2, #48]	; 0x30

		 	 else if(pGPIOx == GPIOI)
		 		 GPIOI_PCLK_DI();
	}

}
 80002ce:	e0b9      	b.n	8000444 <GPIO_PClk_Ctrl+0x19c>
		else if(pGPIOx == GPIOB)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a61      	ldr	r2, [pc, #388]	; (8000458 <GPIO_PClk_Ctrl+0x1b0>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d106      	bne.n	80002e6 <GPIO_PClk_Ctrl+0x3e>
				GPIOB_PCLK_EN();
 80002d8:	4b5e      	ldr	r3, [pc, #376]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 80002da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002dc:	4a5d      	ldr	r2, [pc, #372]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 80002de:	f043 0302 	orr.w	r3, r3, #2
 80002e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e4:	e0ae      	b.n	8000444 <GPIO_PClk_Ctrl+0x19c>
		else if(pGPIOx == GPIOC)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a5c      	ldr	r2, [pc, #368]	; (800045c <GPIO_PClk_Ctrl+0x1b4>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <GPIO_PClk_Ctrl+0x54>
				GPIOC_PCLK_EN();
 80002ee:	4b59      	ldr	r3, [pc, #356]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 80002f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f2:	4a58      	ldr	r2, [pc, #352]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 80002f4:	f043 0304 	orr.w	r3, r3, #4
 80002f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002fa:	e0a3      	b.n	8000444 <GPIO_PClk_Ctrl+0x19c>
		else if(pGPIOx == GPIOD)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a58      	ldr	r2, [pc, #352]	; (8000460 <GPIO_PClk_Ctrl+0x1b8>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <GPIO_PClk_Ctrl+0x6a>
				GPIOD_PCLK_EN();
 8000304:	4b53      	ldr	r3, [pc, #332]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 8000306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000308:	4a52      	ldr	r2, [pc, #328]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 800030a:	f043 0308 	orr.w	r3, r3, #8
 800030e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000310:	e098      	b.n	8000444 <GPIO_PClk_Ctrl+0x19c>
		else if(pGPIOx == GPIOE)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a53      	ldr	r2, [pc, #332]	; (8000464 <GPIO_PClk_Ctrl+0x1bc>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PClk_Ctrl+0x80>
				GPIOE_PCLK_EN();
 800031a:	4b4e      	ldr	r3, [pc, #312]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031e:	4a4d      	ldr	r2, [pc, #308]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 8000320:	f043 0310 	orr.w	r3, r3, #16
 8000324:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000326:	e08d      	b.n	8000444 <GPIO_PClk_Ctrl+0x19c>
		else if(pGPIOx == GPIOF)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a4f      	ldr	r2, [pc, #316]	; (8000468 <GPIO_PClk_Ctrl+0x1c0>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d106      	bne.n	800033e <GPIO_PClk_Ctrl+0x96>
				GPIOF_PCLK_EN();
 8000330:	4b48      	ldr	r3, [pc, #288]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a47      	ldr	r2, [pc, #284]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 8000336:	f043 0320 	orr.w	r3, r3, #32
 800033a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033c:	e082      	b.n	8000444 <GPIO_PClk_Ctrl+0x19c>
		else if(pGPIOx == GPIOG)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a4a      	ldr	r2, [pc, #296]	; (800046c <GPIO_PClk_Ctrl+0x1c4>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PClk_Ctrl+0xac>
				GPIOG_PCLK_EN();
 8000346:	4b43      	ldr	r3, [pc, #268]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	4a42      	ldr	r2, [pc, #264]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 800034c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000350:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000352:	e077      	b.n	8000444 <GPIO_PClk_Ctrl+0x19c>
		else if(pGPIOx == GPIOH)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a46      	ldr	r2, [pc, #280]	; (8000470 <GPIO_PClk_Ctrl+0x1c8>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_PClk_Ctrl+0xc2>
				GPIOH_PCLK_EN();
 800035c:	4b3d      	ldr	r3, [pc, #244]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000360:	4a3c      	ldr	r2, [pc, #240]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 8000362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000366:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000368:	e06c      	b.n	8000444 <GPIO_PClk_Ctrl+0x19c>
		else if(pGPIOx == GPIOI)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a41      	ldr	r2, [pc, #260]	; (8000474 <GPIO_PClk_Ctrl+0x1cc>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d168      	bne.n	8000444 <GPIO_PClk_Ctrl+0x19c>
				GPIOI_PCLK_EN();
 8000372:	4b38      	ldr	r3, [pc, #224]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000376:	4a37      	ldr	r2, [pc, #220]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 8000378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800037c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037e:	e061      	b.n	8000444 <GPIO_PClk_Ctrl+0x19c>
		 	 if(pGPIOx == GPIOA)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a33      	ldr	r2, [pc, #204]	; (8000450 <GPIO_PClk_Ctrl+0x1a8>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d106      	bne.n	8000396 <GPIO_PClk_Ctrl+0xee>
		 		 GPIOA_PCLK_DI();
 8000388:	4b32      	ldr	r3, [pc, #200]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038c:	4a31      	ldr	r2, [pc, #196]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 800038e:	f023 0301 	bic.w	r3, r3, #1
 8000392:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000394:	e056      	b.n	8000444 <GPIO_PClk_Ctrl+0x19c>
		 	 else if(pGPIOx == GPIOB)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a2f      	ldr	r2, [pc, #188]	; (8000458 <GPIO_PClk_Ctrl+0x1b0>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d106      	bne.n	80003ac <GPIO_PClk_Ctrl+0x104>
		 		 GPIOB_PCLK_DI();
 800039e:	4b2d      	ldr	r3, [pc, #180]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a2:	4a2c      	ldr	r2, [pc, #176]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 80003a4:	f023 0302 	bic.w	r3, r3, #2
 80003a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003aa:	e04b      	b.n	8000444 <GPIO_PClk_Ctrl+0x19c>
		 	 else if(pGPIOx == GPIOC)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a2b      	ldr	r2, [pc, #172]	; (800045c <GPIO_PClk_Ctrl+0x1b4>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d106      	bne.n	80003c2 <GPIO_PClk_Ctrl+0x11a>
		 		 GPIOC_PCLK_DI();
 80003b4:	4b27      	ldr	r3, [pc, #156]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b8:	4a26      	ldr	r2, [pc, #152]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 80003ba:	f023 0304 	bic.w	r3, r3, #4
 80003be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c0:	e040      	b.n	8000444 <GPIO_PClk_Ctrl+0x19c>
		 	 else if(pGPIOx == GPIOD)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a26      	ldr	r2, [pc, #152]	; (8000460 <GPIO_PClk_Ctrl+0x1b8>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <GPIO_PClk_Ctrl+0x130>
		 		 GPIOD_PCLK_DI();
 80003ca:	4b22      	ldr	r3, [pc, #136]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ce:	4a21      	ldr	r2, [pc, #132]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 80003d0:	f023 0308 	bic.w	r3, r3, #8
 80003d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d6:	e035      	b.n	8000444 <GPIO_PClk_Ctrl+0x19c>
		 	 else if(pGPIOx == GPIOE)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a22      	ldr	r2, [pc, #136]	; (8000464 <GPIO_PClk_Ctrl+0x1bc>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <GPIO_PClk_Ctrl+0x146>
		 		 GPIOE_PCLK_DI();
 80003e0:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 80003e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e4:	4a1b      	ldr	r2, [pc, #108]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 80003e6:	f023 0310 	bic.w	r3, r3, #16
 80003ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ec:	e02a      	b.n	8000444 <GPIO_PClk_Ctrl+0x19c>
		 	 else if(pGPIOx == GPIOF)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a1d      	ldr	r2, [pc, #116]	; (8000468 <GPIO_PClk_Ctrl+0x1c0>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d106      	bne.n	8000404 <GPIO_PClk_Ctrl+0x15c>
		 		 GPIOF_PCLK_DI();
 80003f6:	4b17      	ldr	r3, [pc, #92]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 80003f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fa:	4a16      	ldr	r2, [pc, #88]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 80003fc:	f023 0320 	bic.w	r3, r3, #32
 8000400:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000402:	e01f      	b.n	8000444 <GPIO_PClk_Ctrl+0x19c>
		 	 else if(pGPIOx == GPIOG)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a19      	ldr	r2, [pc, #100]	; (800046c <GPIO_PClk_Ctrl+0x1c4>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d106      	bne.n	800041a <GPIO_PClk_Ctrl+0x172>
		 		 GPIOG_PCLK_DI();
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000410:	4a10      	ldr	r2, [pc, #64]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 8000412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000416:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000418:	e014      	b.n	8000444 <GPIO_PClk_Ctrl+0x19c>
		 	 else if(pGPIOx == GPIOH)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a14      	ldr	r2, [pc, #80]	; (8000470 <GPIO_PClk_Ctrl+0x1c8>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <GPIO_PClk_Ctrl+0x188>
		 		 GPIOH_PCLK_DI();
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 8000424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000426:	4a0b      	ldr	r2, [pc, #44]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 8000428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800042c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042e:	e009      	b.n	8000444 <GPIO_PClk_Ctrl+0x19c>
		 	 else if(pGPIOx == GPIOI)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a10      	ldr	r2, [pc, #64]	; (8000474 <GPIO_PClk_Ctrl+0x1cc>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d105      	bne.n	8000444 <GPIO_PClk_Ctrl+0x19c>
		 		 GPIOI_PCLK_DI();
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043c:	4a05      	ldr	r2, [pc, #20]	; (8000454 <GPIO_PClk_Ctrl+0x1ac>)
 800043e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000442:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	40020000 	.word	0x40020000
 8000454:	40023800 	.word	0x40023800
 8000458:	40020400 	.word	0x40020400
 800045c:	40020800 	.word	0x40020800
 8000460:	40020c00 	.word	0x40020c00
 8000464:	40021000 	.word	0x40021000
 8000468:	40021400 	.word	0x40021400
 800046c:	40021800 	.word	0x40021800
 8000470:	40021c00 	.word	0x40021c00
 8000474:	40022000 	.word	0x40022000

08000478 <GPIO_Init>:
/*
 ***************************** Init & DeInit *****************************
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle) // initialize the GPIOx peri // takes pointer to the handle struct
{
 8000478:	b480      	push	{r7}
 800047a:	b087      	sub	sp, #28
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
	// 1. config the mode of GPIO pin
	if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMODE <= GPIO_MODE_ANALOG ) { // non-interrupt mode
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	795b      	ldrb	r3, [r3, #5]
 8000488:	2b03      	cmp	r3, #3
 800048a:	d820      	bhi.n	80004ce <GPIO_Init+0x56>
		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMODE << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) ); // storing the MODE value into 'temp' after left-shifting it to the corresponding pin number // every pin has 2 MODER bits
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	795b      	ldrb	r3, [r3, #5]
 8000490:	461a      	mov	r2, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	791b      	ldrb	r3, [r3, #4]
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) ); // clearing the corresponding MODER bits using 0x3 as the mask
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	791b      	ldrb	r3, [r3, #4]
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	2103      	movs	r1, #3
 80004ac:	fa01 f303 	lsl.w	r3, r1, r3
 80004b0:	43db      	mvns	r3, r3
 80004b2:	4619      	mov	r1, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	400a      	ands	r2, r1
 80004ba:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting the corresponding MODER bits
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	6819      	ldr	r1, [r3, #0]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	697a      	ldr	r2, [r7, #20]
 80004c8:	430a      	orrs	r2, r1
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	e0a1      	b.n	8000612 <GPIO_Init+0x19a>
	}
	else {	// Custom interrupt modes - not defined in Reference Manual
		if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMODE <= GPIO_MODE_IT_FT ) {
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	795b      	ldrb	r3, [r3, #5]
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d817      	bhi.n	8000506 <GPIO_Init+0x8e>
			//1. config FTSR and clear RTSR
			EXTI->EXTI_FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80004d6:	4b9b      	ldr	r3, [pc, #620]	; (8000744 <GPIO_Init+0x2cc>)
 80004d8:	68db      	ldr	r3, [r3, #12]
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	7912      	ldrb	r2, [r2, #4]
 80004de:	4611      	mov	r1, r2
 80004e0:	2201      	movs	r2, #1
 80004e2:	408a      	lsls	r2, r1
 80004e4:	4611      	mov	r1, r2
 80004e6:	4a97      	ldr	r2, [pc, #604]	; (8000744 <GPIO_Init+0x2cc>)
 80004e8:	430b      	orrs	r3, r1
 80004ea:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR &=~ ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80004ec:	4b95      	ldr	r3, [pc, #596]	; (8000744 <GPIO_Init+0x2cc>)
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	7912      	ldrb	r2, [r2, #4]
 80004f4:	4611      	mov	r1, r2
 80004f6:	2201      	movs	r2, #1
 80004f8:	408a      	lsls	r2, r1
 80004fa:	43d2      	mvns	r2, r2
 80004fc:	4611      	mov	r1, r2
 80004fe:	4a91      	ldr	r2, [pc, #580]	; (8000744 <GPIO_Init+0x2cc>)
 8000500:	400b      	ands	r3, r1
 8000502:	6093      	str	r3, [r2, #8]
 8000504:	e035      	b.n	8000572 <GPIO_Init+0xfa>
		}
		else if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMODE <= GPIO_MODE_IT_RT ) {
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	795b      	ldrb	r3, [r3, #5]
 800050a:	2b05      	cmp	r3, #5
 800050c:	d817      	bhi.n	800053e <GPIO_Init+0xc6>
			//1. config RTSR and clear FTSR
			EXTI->EXTI_RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800050e:	4b8d      	ldr	r3, [pc, #564]	; (8000744 <GPIO_Init+0x2cc>)
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	7912      	ldrb	r2, [r2, #4]
 8000516:	4611      	mov	r1, r2
 8000518:	2201      	movs	r2, #1
 800051a:	408a      	lsls	r2, r1
 800051c:	4611      	mov	r1, r2
 800051e:	4a89      	ldr	r2, [pc, #548]	; (8000744 <GPIO_Init+0x2cc>)
 8000520:	430b      	orrs	r3, r1
 8000522:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR &=~ ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000524:	4b87      	ldr	r3, [pc, #540]	; (8000744 <GPIO_Init+0x2cc>)
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	7912      	ldrb	r2, [r2, #4]
 800052c:	4611      	mov	r1, r2
 800052e:	2201      	movs	r2, #1
 8000530:	408a      	lsls	r2, r1
 8000532:	43d2      	mvns	r2, r2
 8000534:	4611      	mov	r1, r2
 8000536:	4a83      	ldr	r2, [pc, #524]	; (8000744 <GPIO_Init+0x2cc>)
 8000538:	400b      	ands	r3, r1
 800053a:	60d3      	str	r3, [r2, #12]
 800053c:	e019      	b.n	8000572 <GPIO_Init+0xfa>
		}
		else if ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMODE <= GPIO_MODE_IT_RFT ) {
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	795b      	ldrb	r3, [r3, #5]
 8000542:	2b06      	cmp	r3, #6
 8000544:	d815      	bhi.n	8000572 <GPIO_Init+0xfa>
			//1. config both FTSR and RTSR
			EXTI->EXTI_RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000546:	4b7f      	ldr	r3, [pc, #508]	; (8000744 <GPIO_Init+0x2cc>)
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	7912      	ldrb	r2, [r2, #4]
 800054e:	4611      	mov	r1, r2
 8000550:	2201      	movs	r2, #1
 8000552:	408a      	lsls	r2, r1
 8000554:	4611      	mov	r1, r2
 8000556:	4a7b      	ldr	r2, [pc, #492]	; (8000744 <GPIO_Init+0x2cc>)
 8000558:	430b      	orrs	r3, r1
 800055a:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800055c:	4b79      	ldr	r3, [pc, #484]	; (8000744 <GPIO_Init+0x2cc>)
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	7912      	ldrb	r2, [r2, #4]
 8000564:	4611      	mov	r1, r2
 8000566:	2201      	movs	r2, #1
 8000568:	408a      	lsls	r2, r1
 800056a:	4611      	mov	r1, r2
 800056c:	4a75      	ldr	r2, [pc, #468]	; (8000744 <GPIO_Init+0x2cc>)
 800056e:	430b      	orrs	r3, r1
 8000570:	60d3      	str	r3, [r2, #12]
		}

		//2. config SYSCFG_EXTICR for GPIO port selection
		uint8_t temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	791b      	ldrb	r3, [r3, #4]
 8000576:	089b      	lsrs	r3, r3, #2
 8000578:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	f003 0303 	and.w	r3, r3, #3
 8000582:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIOBASE_TO_PORTCODE(pGPIOHandle->pGPIOx);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a6f      	ldr	r2, [pc, #444]	; (8000748 <GPIO_Init+0x2d0>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d024      	beq.n	80005d8 <GPIO_Init+0x160>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a6e      	ldr	r2, [pc, #440]	; (800074c <GPIO_Init+0x2d4>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d01d      	beq.n	80005d4 <GPIO_Init+0x15c>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a6c      	ldr	r2, [pc, #432]	; (8000750 <GPIO_Init+0x2d8>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d016      	beq.n	80005d0 <GPIO_Init+0x158>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a6b      	ldr	r2, [pc, #428]	; (8000754 <GPIO_Init+0x2dc>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d00f      	beq.n	80005cc <GPIO_Init+0x154>
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a69      	ldr	r2, [pc, #420]	; (8000758 <GPIO_Init+0x2e0>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d008      	beq.n	80005c8 <GPIO_Init+0x150>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a68      	ldr	r2, [pc, #416]	; (800075c <GPIO_Init+0x2e4>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d101      	bne.n	80005c4 <GPIO_Init+0x14c>
 80005c0:	2305      	movs	r3, #5
 80005c2:	e00a      	b.n	80005da <GPIO_Init+0x162>
 80005c4:	2300      	movs	r3, #0
 80005c6:	e008      	b.n	80005da <GPIO_Init+0x162>
 80005c8:	2304      	movs	r3, #4
 80005ca:	e006      	b.n	80005da <GPIO_Init+0x162>
 80005cc:	2303      	movs	r3, #3
 80005ce:	e004      	b.n	80005da <GPIO_Init+0x162>
 80005d0:	2302      	movs	r3, #2
 80005d2:	e002      	b.n	80005da <GPIO_Init+0x162>
 80005d4:	2301      	movs	r3, #1
 80005d6:	e000      	b.n	80005da <GPIO_Init+0x162>
 80005d8:	2300      	movs	r3, #0
 80005da:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80005dc:	4b60      	ldr	r3, [pc, #384]	; (8000760 <GPIO_Init+0x2e8>)
 80005de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e0:	4a5f      	ldr	r2, [pc, #380]	; (8000760 <GPIO_Init+0x2e8>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e6:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->SYSCFG_EXTICR[temp] = ( portCode << (temp2*4) );
 80005e8:	7c7a      	ldrb	r2, [r7, #17]
 80005ea:	7cbb      	ldrb	r3, [r7, #18]
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	fa02 f103 	lsl.w	r1, r2, r3
 80005f2:	4a5c      	ldr	r2, [pc, #368]	; (8000764 <GPIO_Init+0x2ec>)
 80005f4:	7cfb      	ldrb	r3, [r7, #19]
 80005f6:	3302      	adds	r3, #2
 80005f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable EXTI intr delivery using IMR
		EXTI->EXTI_IMR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005fc:	4b51      	ldr	r3, [pc, #324]	; (8000744 <GPIO_Init+0x2cc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	7912      	ldrb	r2, [r2, #4]
 8000604:	4611      	mov	r1, r2
 8000606:	2201      	movs	r2, #1
 8000608:	408a      	lsls	r2, r1
 800060a:	4611      	mov	r1, r2
 800060c:	4a4d      	ldr	r2, [pc, #308]	; (8000744 <GPIO_Init+0x2cc>)
 800060e:	430b      	orrs	r3, r1
 8000610:	6013      	str	r3, [r2, #0]
	}

	// 2. config o/p speed
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOSPEED << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) ); // storing the OSPEED value into 'temp' after left-shifting it to the corresponding pin number // every pin has 2 OSPEEDR bits
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	799b      	ldrb	r3, [r3, #6]
 8000616:	461a      	mov	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	689a      	ldr	r2, [r3, #8]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	2103      	movs	r1, #3
 8000632:	fa01 f303 	lsl.w	r3, r1, r3
 8000636:	43db      	mvns	r3, r3
 8000638:	4619      	mov	r1, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	400a      	ands	r2, r1
 8000640:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	6899      	ldr	r1, [r3, #8]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	430a      	orrs	r2, r1
 8000650:	609a      	str	r2, [r3, #8]

	// 3. config PuPd settings
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinPUPD << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) ); // storing the PUPD value into 'temp' after left-shifting it to the corresponding pin number // every pin has 2 PUPDR bits
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	79db      	ldrb	r3, [r3, #7]
 8000656:	461a      	mov	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	791b      	ldrb	r3, [r3, #4]
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	fa02 f303 	lsl.w	r3, r2, r3
 8000662:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	68da      	ldr	r2, [r3, #12]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	791b      	ldrb	r3, [r3, #4]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	2103      	movs	r1, #3
 8000672:	fa01 f303 	lsl.w	r3, r1, r3
 8000676:	43db      	mvns	r3, r3
 8000678:	4619      	mov	r1, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	400a      	ands	r2, r1
 8000680:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	68d9      	ldr	r1, [r3, #12]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	430a      	orrs	r2, r1
 8000690:	60da      	str	r2, [r3, #12]

	// 4. config o/p type
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOTYPE << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ); // storing the OTYPE value into 'temp' after left-shifting it to the corresponding pin number // every pin has 1 OTYPER bit
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	7a1b      	ldrb	r3, [r3, #8]
 8000696:	461a      	mov	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	791b      	ldrb	r3, [r3, #4]
 800069c:	fa02 f303 	lsl.w	r3, r2, r3
 80006a0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	685a      	ldr	r2, [r3, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	4619      	mov	r1, r3
 80006ae:	2301      	movs	r3, #1
 80006b0:	408b      	lsls	r3, r1
 80006b2:	43db      	mvns	r3, r3
 80006b4:	4619      	mov	r1, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	400a      	ands	r2, r1
 80006bc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	6859      	ldr	r1, [r3, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	430a      	orrs	r2, r1
 80006cc:	605a      	str	r2, [r3, #4]

	// 5. config alt. func. (if required) // valid only if PinMODE = AF mode, config with the value in var PinAF
	if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMODE == GPIO_MODE_ALTFN )
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	795b      	ldrb	r3, [r3, #5]
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d131      	bne.n	800073a <GPIO_Init+0x2c2>
	{
		// config alt. func. regs
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	791b      	ldrb	r3, [r3, #4]
 80006da:	08db      	lsrs	r3, r3, #3
 80006dc:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	791b      	ldrb	r3, [r3, #4]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << ( 4 * temp2 ) ); //clearing - 4 bits per pin
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	7c3a      	ldrb	r2, [r7, #16]
 80006ee:	3208      	adds	r2, #8
 80006f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	220f      	movs	r2, #15
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	43db      	mvns	r3, r3
 8000700:	4618      	mov	r0, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	7c3a      	ldrb	r2, [r7, #16]
 8000708:	4001      	ands	r1, r0
 800070a:	3208      	adds	r2, #8
 800070c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAF << ( 4 * temp2 ) ); //setting
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	7c3a      	ldrb	r2, [r7, #16]
 8000716:	3208      	adds	r2, #8
 8000718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	7a5b      	ldrb	r3, [r3, #9]
 8000720:	461a      	mov	r2, r3
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	4618      	mov	r0, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	7c3a      	ldrb	r2, [r7, #16]
 8000732:	4301      	orrs	r1, r0
 8000734:	3208      	adds	r2, #8
 8000736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800073a:	bf00      	nop
 800073c:	371c      	adds	r7, #28
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	40013c00 	.word	0x40013c00
 8000748:	40020000 	.word	0x40020000
 800074c:	40020400 	.word	0x40020400
 8000750:	40020800 	.word	0x40020800
 8000754:	40020c00 	.word	0x40020c00
 8000758:	40021000 	.word	0x40021000
 800075c:	40021400 	.word	0x40021400
 8000760:	40023800 	.word	0x40023800
 8000764:	40013800 	.word	0x40013800

08000768 <GPIO_ToggleOp_Pin>:
{
	pGPIOx->ODR = Value;
}

void GPIO_ToggleOp_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) // toggle o/p pin
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= ( 0x1 << PinNumber );
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	78fa      	ldrb	r2, [r7, #3]
 800077a:	2101      	movs	r1, #1
 800077c:	fa01 f202 	lsl.w	r2, r1, r2
 8000780:	405a      	eors	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	615a      	str	r2, [r3, #20]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <__libc_init_array>:
 8000790:	b570      	push	{r4, r5, r6, lr}
 8000792:	4d0d      	ldr	r5, [pc, #52]	; (80007c8 <__libc_init_array+0x38>)
 8000794:	4c0d      	ldr	r4, [pc, #52]	; (80007cc <__libc_init_array+0x3c>)
 8000796:	1b64      	subs	r4, r4, r5
 8000798:	10a4      	asrs	r4, r4, #2
 800079a:	2600      	movs	r6, #0
 800079c:	42a6      	cmp	r6, r4
 800079e:	d109      	bne.n	80007b4 <__libc_init_array+0x24>
 80007a0:	4d0b      	ldr	r5, [pc, #44]	; (80007d0 <__libc_init_array+0x40>)
 80007a2:	4c0c      	ldr	r4, [pc, #48]	; (80007d4 <__libc_init_array+0x44>)
 80007a4:	f000 f818 	bl	80007d8 <_init>
 80007a8:	1b64      	subs	r4, r4, r5
 80007aa:	10a4      	asrs	r4, r4, #2
 80007ac:	2600      	movs	r6, #0
 80007ae:	42a6      	cmp	r6, r4
 80007b0:	d105      	bne.n	80007be <__libc_init_array+0x2e>
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80007b8:	4798      	blx	r3
 80007ba:	3601      	adds	r6, #1
 80007bc:	e7ee      	b.n	800079c <__libc_init_array+0xc>
 80007be:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c2:	4798      	blx	r3
 80007c4:	3601      	adds	r6, #1
 80007c6:	e7f2      	b.n	80007ae <__libc_init_array+0x1e>
 80007c8:	080007f0 	.word	0x080007f0
 80007cc:	080007f0 	.word	0x080007f0
 80007d0:	080007f0 	.word	0x080007f0
 80007d4:	080007f4 	.word	0x080007f4

080007d8 <_init>:
 80007d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007da:	bf00      	nop
 80007dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007de:	bc08      	pop	{r3}
 80007e0:	469e      	mov	lr, r3
 80007e2:	4770      	bx	lr

080007e4 <_fini>:
 80007e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007e6:	bf00      	nop
 80007e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ea:	bc08      	pop	{r3}
 80007ec:	469e      	mov	lr, r3
 80007ee:	4770      	bx	lr
