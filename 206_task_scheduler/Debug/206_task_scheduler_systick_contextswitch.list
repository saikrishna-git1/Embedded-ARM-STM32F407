
206_task_scheduler_systick_contextswitch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fa0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08001148  08001148  00011148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001258  08001258  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08001258  08001258  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001258  08001258  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001258  08001258  00011258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800125c  0800125c  0001125c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000044  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000bb5  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003aa  00000000  00000000  00020c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  00021000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000168  00000000  00000000  000211a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b1c  00000000  00000000  00021308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001574  00000000  00000000  00023e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000970a  00000000  00000000  00025398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002eaa2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c08  00000000  00000000  0002eaf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000074 	.word	0x20000074
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001130 	.word	0x08001130

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000078 	.word	0x20000078
 80001e4:	08001130 	.word	0x08001130

080001e8 <main>:
uint32_t psp_of_tasks[MAX_TASKS] = {T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START};
uint32_t addr_of_task_handlers[MAX_TASKS];
uint8_t current_task = 0; //task1 is running

int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	enable_processor_faults();
 80001ec:	f000 f82c 	bl	8000248 <enable_processor_faults>

	addr_of_task_handlers[0] = (uint32_t) task1_handler; //store addresses of all task handlers in a global var
 80001f0:	4a0e      	ldr	r2, [pc, #56]	; (800022c <main+0x44>)
 80001f2:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <main+0x48>)
 80001f4:	601a      	str	r2, [r3, #0]
	addr_of_task_handlers[1] = (uint32_t) task2_handler;
 80001f6:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <main+0x4c>)
 80001f8:	4b0d      	ldr	r3, [pc, #52]	; (8000230 <main+0x48>)
 80001fa:	605a      	str	r2, [r3, #4]
	addr_of_task_handlers[2] = (uint32_t) task3_handler;
 80001fc:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <main+0x50>)
 80001fe:	4b0c      	ldr	r3, [pc, #48]	; (8000230 <main+0x48>)
 8000200:	609a      	str	r2, [r3, #8]
	addr_of_task_handlers[3] = (uint32_t) task4_handler;
 8000202:	4a0e      	ldr	r2, [pc, #56]	; (800023c <main+0x54>)
 8000204:	4b0a      	ldr	r3, [pc, #40]	; (8000230 <main+0x48>)
 8000206:	60da      	str	r2, [r3, #12]

	tasks_dummy_context_init(); //store valid values in SF-1 and SF-2
 8000208:	f000 f88a 	bl	8000320 <tasks_dummy_context_init>

	systick_init(TICK_RATE);
 800020c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000210:	f000 f83e 	bl	8000290 <systick_init>

	schd_sp_init(SCHD_STACK_START); //init schd SP (MSP) with pre-determined SP value
 8000214:	480a      	ldr	r0, [pc, #40]	; (8000240 <main+0x58>)
 8000216:	f000 f835 	bl	8000284 <schd_sp_init>
	current_task = 0;
 800021a:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <main+0x5c>)
 800021c:	2200      	movs	r2, #0
 800021e:	701a      	strb	r2, [r3, #0]
	switch_sp_to_psp();
 8000220:	f000 f95c 	bl	80004dc <switch_sp_to_psp>
	task1_handler(); //This is a fn call -
 8000224:	f000 f902 	bl	800042c <task1_handler>

	while(1);
 8000228:	e7fe      	b.n	8000228 <main+0x40>
 800022a:	bf00      	nop
 800022c:	0800042d 	.word	0x0800042d
 8000230:	20000090 	.word	0x20000090
 8000234:	0800043d 	.word	0x0800043d
 8000238:	0800044d 	.word	0x0800044d
 800023c:	0800045d 	.word	0x0800045d
 8000240:	2001ec00 	.word	0x2001ec00
 8000244:	200000a0 	.word	0x200000a0

08000248 <enable_processor_faults>:
}


void enable_processor_faults(void) {
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
	//Enable the faults in SCB->SHCSR
	uint32_t *pSHCSR = (uint32_t *) 0xE000ED24;
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <enable_processor_faults+0x38>)
 8000250:	607b      	str	r3, [r7, #4]
	*pSHCSR |= (1 << 16); //MM F
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); //Bus F
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18); //Usage F
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	601a      	str	r2, [r3, #0]
}
 8000276:	bf00      	nop
 8000278:	370c      	adds	r7, #12
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	e000ed24 	.word	0xe000ed24

08000284 <schd_sp_init>:


__attribute__((naked)) void schd_sp_init(uint32_t schd_stack_start) {
 8000284:	4603      	mov	r3, r0
	__asm volatile("MSR MSP, R0" : : "r"(schd_stack_start) : );
 8000286:	f380 8808 	msr	MSP, r0
	__asm volatile("BX LR"); //go back to main(), since main() called this fn
 800028a:	4770      	bx	lr
}
 800028c:	bf00      	nop
	...

08000290 <systick_init>:


void systick_init(uint32_t ticks) {
 8000290:	b480      	push	{r7}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	uint32_t *pSYST_CSR = (uint32_t *) 0xE000E010;
 8000298:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <systick_init+0x80>)
 800029a:	617b      	str	r3, [r7, #20]
	uint32_t *pSYST_RVR = (uint32_t *) 0xE000E014;
 800029c:	4b1d      	ldr	r3, [pc, #116]	; (8000314 <systick_init+0x84>)
 800029e:	613b      	str	r3, [r7, #16]
	uint32_t *pSYST_CVR = (uint32_t *) 0xE000E018;
 80002a0:	4b1d      	ldr	r3, [pc, #116]	; (8000318 <systick_init+0x88>)
 80002a2:	60fb      	str	r3, [r7, #12]

	uint32_t count_value = (SYSTICK_TIM_CLK / ticks) - 1;
 80002a4:	4a1d      	ldr	r2, [pc, #116]	; (800031c <systick_init+0x8c>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ac:	3b01      	subs	r3, #1
 80002ae:	60bb      	str	r3, [r7, #8]

	//1. Disable the timer
	*pSYST_CSR &=~ (1 << 0);
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f023 0201 	bic.w	r2, r3, #1
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	601a      	str	r2, [r3, #0]

	//2. Load the count_value into RVR
	*pSYST_RVR &= ~(0x00FFFFFF); //Clear RVR, only 24 bits are valid. Do not affect reserved bits
 80002bc:	693b      	ldr	r3, [r7, #16]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80002c4:	693b      	ldr	r3, [r7, #16]
 80002c6:	601a      	str	r2, [r3, #0]
	*pSYST_RVR |= count_value; //Load the count_value into RVR
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	431a      	orrs	r2, r3
 80002d0:	693b      	ldr	r3, [r7, #16]
 80002d2:	601a      	str	r2, [r3, #0]

	//3. Clear CVR
	*pSYST_CVR &= ~(0x00FFFFFF);
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	601a      	str	r2, [r3, #0]

	//4. Configure CSR
	*pSYST_CSR |= (1 << 1); //trigger systick exception
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f043 0202 	orr.w	r2, r3, #2
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	601a      	str	r2, [r3, #0]
	*pSYST_CSR |= (1 << 2); //processor clock
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f043 0204 	orr.w	r2, r3, #4
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	601a      	str	r2, [r3, #0]

	//5. Enable the timer
	*pSYST_CSR |= (1 << 0);
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f043 0201 	orr.w	r2, r3, #1
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	601a      	str	r2, [r3, #0]
}
 8000304:	bf00      	nop
 8000306:	371c      	adds	r7, #28
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	e000e010 	.word	0xe000e010
 8000314:	e000e014 	.word	0xe000e014
 8000318:	e000e018 	.word	0xe000e018
 800031c:	00f42400 	.word	0x00f42400

08000320 <tasks_dummy_context_init>:


void tasks_dummy_context_init(void) {
 8000320:	b480      	push	{r7}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
	uint32_t *pPSP = NULL;
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<MAX_TASKS; i++) {
 800032a:	2300      	movs	r3, #0
 800032c:	60bb      	str	r3, [r7, #8]
 800032e:	e032      	b.n	8000396 <tasks_dummy_context_init+0x76>
		pPSP = (uint32_t *) psp_of_tasks[i]; //assigning addr to PSP
 8000330:	4a1d      	ldr	r2, [pc, #116]	; (80003a8 <tasks_dummy_context_init+0x88>)
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000338:	60fb      	str	r3, [r7, #12]

		pPSP--;
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	3b04      	subs	r3, #4
 800033e:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //xPSR
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000346:	601a      	str	r2, [r3, #0]

		pPSP--;
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	3b04      	subs	r3, #4
 800034c:	60fb      	str	r3, [r7, #12]
		*pPSP = addr_of_task_handlers[i]; //PC(ret addr) - store the addr of task handlers
 800034e:	4a17      	ldr	r2, [pc, #92]	; (80003ac <tasks_dummy_context_init+0x8c>)
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	601a      	str	r2, [r3, #0]

		pPSP--;
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	3b04      	subs	r3, #4
 800035e:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_LR_EXC_RETURN; //LR (EXC_RETURN)
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	f06f 0202 	mvn.w	r2, #2
 8000366:	601a      	str	r2, [r3, #0]

		for(int i=0; i<13; i++) { //Next 13 words in stack = 0 (R12, R3-R0, R11-R4)
 8000368:	2300      	movs	r3, #0
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	e008      	b.n	8000380 <tasks_dummy_context_init+0x60>
			pPSP--;
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3b04      	subs	r3, #4
 8000372:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
		for(int i=0; i<13; i++) { //Next 13 words in stack = 0 (R12, R3-R0, R11-R4)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	3301      	adds	r3, #1
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2b0c      	cmp	r3, #12
 8000384:	ddf3      	ble.n	800036e <tasks_dummy_context_init+0x4e>
		}

		psp_of_tasks[i] = (uint32_t) pPSP; //update PSP value for each task in global var after init dummy stack
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	4907      	ldr	r1, [pc, #28]	; (80003a8 <tasks_dummy_context_init+0x88>)
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<MAX_TASKS; i++) {
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	3301      	adds	r3, #1
 8000394:	60bb      	str	r3, [r7, #8]
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	2b03      	cmp	r3, #3
 800039a:	ddc9      	ble.n	8000330 <tasks_dummy_context_init+0x10>
	}
}
 800039c:	bf00      	nop
 800039e:	bf00      	nop
 80003a0:	3714      	adds	r7, #20
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	20000000 	.word	0x20000000
 80003ac:	20000090 	.word	0x20000090

080003b0 <save_psp_value_to_global_var>:


void save_psp_value_to_global_var(uint32_t curr_updated_psp_value) {
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task] = curr_updated_psp_value;
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <save_psp_value_to_global_var+0x20>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4619      	mov	r1, r3
 80003be:	4a05      	ldr	r2, [pc, #20]	; (80003d4 <save_psp_value_to_global_var+0x24>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	200000a0 	.word	0x200000a0
 80003d4:	20000000 	.word	0x20000000

080003d8 <update_next_task>:


void update_next_task(void) {
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
	current_task++; //Round-Robin algo
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <update_next_task+0x28>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	3301      	adds	r3, #1
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <update_next_task+0x28>)
 80003e6:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS;
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <update_next_task+0x28>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	f003 0303 	and.w	r3, r3, #3
 80003f0:	b2da      	uxtb	r2, r3
 80003f2:	4b03      	ldr	r3, [pc, #12]	; (8000400 <update_next_task+0x28>)
 80003f4:	701a      	strb	r2, [r3, #0]
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	200000a0 	.word	0x200000a0

08000404 <SysTick_Handler>:


__attribute__((naked)) void SysTick_Handler(void) { //This is the scheduler and also does the context switch
	//1. Save the context of current task - see diagram in TB
	//1.1 Get current running task's PSP value from PSP register into R0
	__asm volatile("MRS R0, PSP");
 8000404:	f3ef 8009 	mrs	r0, PSP
	//1.2 Use the PSP to store SF2 (R4-R11)
	__asm volatile("STMDB R0!, {R4-R11}"); //can't use PUSH for stacking since SysTick_Handler uses MSP, not PSP
 8000408:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//1.3 Save the current updated value of PSP to global variable
	__asm volatile("PUSH {LR}");
 800040c:	b500      	push	{lr}
	__asm volatile("BL save_psp_value_to_global_var");
 800040e:	f7ff ffcf 	bl	80003b0 <save_psp_value_to_global_var>


	//2. Retrieve the context of next task
	//2.1 Decide what is the next task
	__asm volatile("BL update_next_task");
 8000412:	f7ff ffe1 	bl	80003d8 <update_next_task>
	//2.2 Get its previous PSP value
	__asm volatile("BL get_psp_value_into_r0");
 8000416:	f000 f851 	bl	80004bc <get_psp_value_into_r0>
	//2.3 Using that PSP value, retrieve SF2
	__asm volatile("LDMIA R0!, {R4-R11}");
 800041a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//2.4 Update PSP and exit
	__asm volatile("MSR PSP, R0");
 800041e:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 8000422:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 8000426:	4770      	bx	lr

}
 8000428:	bf00      	nop
	...

0800042c <task1_handler>:


void task1_handler(void) { //Task handler is not your normal p. exception handler. It is a C-function.
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	while(1) {
		printf("In task-1 handler\n"); //ITM fifo not gaurded. It is a shared resource between multiple tasks. So prints will be overlapped
 8000430:	4801      	ldr	r0, [pc, #4]	; (8000438 <task1_handler+0xc>)
 8000432:	f000 f9f3 	bl	800081c <puts>
 8000436:	e7fb      	b.n	8000430 <task1_handler+0x4>
 8000438:	08001148 	.word	0x08001148

0800043c <task2_handler>:
	}
}


void task2_handler(void) {
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	while(1) {
		printf("In task-2 handler\n");
 8000440:	4801      	ldr	r0, [pc, #4]	; (8000448 <task2_handler+0xc>)
 8000442:	f000 f9eb 	bl	800081c <puts>
 8000446:	e7fb      	b.n	8000440 <task2_handler+0x4>
 8000448:	0800115c 	.word	0x0800115c

0800044c <task3_handler>:
	}
}


void task3_handler(void) {
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	while(1) {
		printf("In task-3 handler\n");
 8000450:	4801      	ldr	r0, [pc, #4]	; (8000458 <task3_handler+0xc>)
 8000452:	f000 f9e3 	bl	800081c <puts>
 8000456:	e7fb      	b.n	8000450 <task3_handler+0x4>
 8000458:	08001170 	.word	0x08001170

0800045c <task4_handler>:
	}
}


void task4_handler(void) {
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	while(1) {
		printf("In task-4 handler\n");
 8000460:	4801      	ldr	r0, [pc, #4]	; (8000468 <task4_handler+0xc>)
 8000462:	f000 f9db 	bl	800081c <puts>
 8000466:	e7fb      	b.n	8000460 <task4_handler+0x4>
 8000468:	08001184 	.word	0x08001184

0800046c <HardFault_Handler>:
	}
}


void HardFault_Handler(void) {
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	printf("In HardFault_Handler\n");
 8000470:	4802      	ldr	r0, [pc, #8]	; (800047c <HardFault_Handler+0x10>)
 8000472:	f000 f9d3 	bl	800081c <puts>
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	08001198 	.word	0x08001198

08000480 <MemManage_Handler>:


void MemManage_Handler(void) {
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	printf("In MemManage_Handler\n");
 8000484:	4802      	ldr	r0, [pc, #8]	; (8000490 <MemManage_Handler+0x10>)
 8000486:	f000 f9c9 	bl	800081c <puts>
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	080011b0 	.word	0x080011b0

08000494 <BusFault_Handler>:


void BusFault_Handler(void) {
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	printf("In BusFault_Handler\n");
 8000498:	4802      	ldr	r0, [pc, #8]	; (80004a4 <BusFault_Handler+0x10>)
 800049a:	f000 f9bf 	bl	800081c <puts>
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	080011c8 	.word	0x080011c8

080004a8 <UsageFault_Handler>:


void UsageFault_Handler(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	printf("In UsageFault_Handler\n");
 80004ac:	4802      	ldr	r0, [pc, #8]	; (80004b8 <UsageFault_Handler+0x10>)
 80004ae:	f000 f9b5 	bl	800081c <puts>
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	080011dc 	.word	0x080011dc

080004bc <get_psp_value_into_r0>:


uint32_t get_psp_value_into_r0(void) {
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 80004c0:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <get_psp_value_into_r0+0x18>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <get_psp_value_into_r0+0x1c>)
 80004c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	200000a0 	.word	0x200000a0
 80004d8:	20000000 	.word	0x20000000

080004dc <switch_sp_to_psp>:


__attribute__((naked)) void switch_sp_to_psp(void) {
	//1. First init PSP with task1 stack_start addr - 	//get PSP value of current task
	__asm volatile("PUSH {LR}"); //preserve LR to go back to main()
 80004dc:	b500      	push	{lr}
	__asm volatile("BL get_psp_value_into_r0"); //stack addr of curr task will be stored in R0
 80004de:	f7ff ffed 	bl	80004bc <get_psp_value_into_r0>
	__asm volatile("MSR PSP, R0"); //load the addr into PSP
 80004e2:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 80004e6:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP in CONTROL reg
	__asm volatile("MRS R0, CONTROL"); //read
 80004ea:	f3ef 8014 	mrs	r0, CONTROL
	__asm volatile("ORR R0, R0, 0x2"); //modify R0 |= (1<<1);
 80004ee:	f040 0002 	orr.w	r0, r0, #2
	__asm volatile("MSR CONTROL, R0"); //write back
 80004f2:	f380 8814 	msr	CONTROL, r0

	//3. Go back to main()
	__asm volatile("BX LR");
 80004f6:	4770      	bx	lr
}
 80004f8:	bf00      	nop
	...

080004fc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <ITM_SendChar+0x44>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <ITM_SendChar+0x44>)
 800050c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000510:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <ITM_SendChar+0x48>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <ITM_SendChar+0x48>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800051e:	bf00      	nop
 8000520:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0f8      	beq.n	8000520 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800052e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	6013      	str	r3, [r2, #0]
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	e000edfc 	.word	0xe000edfc
 8000544:	e0000e00 	.word	0xe0000e00

08000548 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	e00a      	b.n	8000570 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800055a:	f3af 8000 	nop.w
 800055e:	4601      	mov	r1, r0
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	60ba      	str	r2, [r7, #8]
 8000566:	b2ca      	uxtb	r2, r1
 8000568:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	3301      	adds	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	697a      	ldr	r2, [r7, #20]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	429a      	cmp	r2, r3
 8000576:	dbf0      	blt.n	800055a <_read+0x12>
	}

return len;
 8000578:	687b      	ldr	r3, [r7, #4]
}
 800057a:	4618      	mov	r0, r3
 800057c:	3718      	adds	r7, #24
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b086      	sub	sp, #24
 8000586:	af00      	add	r7, sp, #0
 8000588:	60f8      	str	r0, [r7, #12]
 800058a:	60b9      	str	r1, [r7, #8]
 800058c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
 8000592:	e009      	b.n	80005a8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	60ba      	str	r2, [r7, #8]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ffad 	bl	80004fc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697a      	ldr	r2, [r7, #20]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	dbf1      	blt.n	8000594 <_write+0x12>
	}
	return len;
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <_close>:

int _close(int file)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b083      	sub	sp, #12
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
	return -1;
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005e0:	605a      	str	r2, [r3, #4]
	return 0;
 80005e2:	2300      	movs	r3, #0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr

080005ee <_isatty>:

int _isatty(int file)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
	return 1;
 80005f6:	2301      	movs	r3, #1
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr

08000602 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000602:	b480      	push	{r7}
 8000604:	b085      	sub	sp, #20
 8000606:	af00      	add	r7, sp, #0
 8000608:	60f8      	str	r0, [r7, #12]
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
	return 0;
 800060e:	2300      	movs	r3, #0
}
 8000610:	4618      	mov	r0, r3
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr
	...

0800061c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000624:	4a14      	ldr	r2, [pc, #80]	; (8000678 <_sbrk+0x5c>)
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <_sbrk+0x60>)
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <_sbrk+0x64>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d102      	bne.n	800063e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <_sbrk+0x64>)
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <_sbrk+0x68>)
 800063c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <_sbrk+0x64>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	693a      	ldr	r2, [r7, #16]
 8000648:	429a      	cmp	r2, r3
 800064a:	d207      	bcs.n	800065c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800064c:	f000 f846 	bl	80006dc <__errno>
 8000650:	4603      	mov	r3, r0
 8000652:	220c      	movs	r2, #12
 8000654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	e009      	b.n	8000670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <_sbrk+0x64>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <_sbrk+0x64>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	4a05      	ldr	r2, [pc, #20]	; (8000680 <_sbrk+0x64>)
 800066c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800066e:	68fb      	ldr	r3, [r7, #12]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20020000 	.word	0x20020000
 800067c:	00000400 	.word	0x00000400
 8000680:	200000a4 	.word	0x200000a4
 8000684:	200000b8 	.word	0x200000b8

08000688 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800068a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800068c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000692:	490d      	ldr	r1, [pc, #52]	; (80006c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000694:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <LoopForever+0xe>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a8:	4c0a      	ldr	r4, [pc, #40]	; (80006d4 <LoopForever+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006b6:	f000 f817 	bl	80006e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ba:	f7ff fd95 	bl	80001e8 <main>

080006be <LoopForever>:

LoopForever:
  b LoopForever
 80006be:	e7fe      	b.n	80006be <LoopForever>
  ldr   r0, =_estack
 80006c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80006cc:	08001260 	.word	0x08001260
  ldr r2, =_sbss
 80006d0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80006d4:	200000b8 	.word	0x200000b8

080006d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC_IRQHandler>
	...

080006dc <__errno>:
 80006dc:	4b01      	ldr	r3, [pc, #4]	; (80006e4 <__errno+0x8>)
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000010 	.word	0x20000010

080006e8 <__libc_init_array>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	4d0d      	ldr	r5, [pc, #52]	; (8000720 <__libc_init_array+0x38>)
 80006ec:	4c0d      	ldr	r4, [pc, #52]	; (8000724 <__libc_init_array+0x3c>)
 80006ee:	1b64      	subs	r4, r4, r5
 80006f0:	10a4      	asrs	r4, r4, #2
 80006f2:	2600      	movs	r6, #0
 80006f4:	42a6      	cmp	r6, r4
 80006f6:	d109      	bne.n	800070c <__libc_init_array+0x24>
 80006f8:	4d0b      	ldr	r5, [pc, #44]	; (8000728 <__libc_init_array+0x40>)
 80006fa:	4c0c      	ldr	r4, [pc, #48]	; (800072c <__libc_init_array+0x44>)
 80006fc:	f000 fd18 	bl	8001130 <_init>
 8000700:	1b64      	subs	r4, r4, r5
 8000702:	10a4      	asrs	r4, r4, #2
 8000704:	2600      	movs	r6, #0
 8000706:	42a6      	cmp	r6, r4
 8000708:	d105      	bne.n	8000716 <__libc_init_array+0x2e>
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000710:	4798      	blx	r3
 8000712:	3601      	adds	r6, #1
 8000714:	e7ee      	b.n	80006f4 <__libc_init_array+0xc>
 8000716:	f855 3b04 	ldr.w	r3, [r5], #4
 800071a:	4798      	blx	r3
 800071c:	3601      	adds	r6, #1
 800071e:	e7f2      	b.n	8000706 <__libc_init_array+0x1e>
 8000720:	08001258 	.word	0x08001258
 8000724:	08001258 	.word	0x08001258
 8000728:	08001258 	.word	0x08001258
 800072c:	0800125c 	.word	0x0800125c

08000730 <memset>:
 8000730:	4402      	add	r2, r0
 8000732:	4603      	mov	r3, r0
 8000734:	4293      	cmp	r3, r2
 8000736:	d100      	bne.n	800073a <memset+0xa>
 8000738:	4770      	bx	lr
 800073a:	f803 1b01 	strb.w	r1, [r3], #1
 800073e:	e7f9      	b.n	8000734 <memset+0x4>

08000740 <_puts_r>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	460e      	mov	r6, r1
 8000744:	4605      	mov	r5, r0
 8000746:	b118      	cbz	r0, 8000750 <_puts_r+0x10>
 8000748:	6983      	ldr	r3, [r0, #24]
 800074a:	b90b      	cbnz	r3, 8000750 <_puts_r+0x10>
 800074c:	f000 fa44 	bl	8000bd8 <__sinit>
 8000750:	69ab      	ldr	r3, [r5, #24]
 8000752:	68ac      	ldr	r4, [r5, #8]
 8000754:	b913      	cbnz	r3, 800075c <_puts_r+0x1c>
 8000756:	4628      	mov	r0, r5
 8000758:	f000 fa3e 	bl	8000bd8 <__sinit>
 800075c:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <_puts_r+0xd0>)
 800075e:	429c      	cmp	r4, r3
 8000760:	d120      	bne.n	80007a4 <_puts_r+0x64>
 8000762:	686c      	ldr	r4, [r5, #4]
 8000764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000766:	07db      	lsls	r3, r3, #31
 8000768:	d405      	bmi.n	8000776 <_puts_r+0x36>
 800076a:	89a3      	ldrh	r3, [r4, #12]
 800076c:	0598      	lsls	r0, r3, #22
 800076e:	d402      	bmi.n	8000776 <_puts_r+0x36>
 8000770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000772:	f000 facf 	bl	8000d14 <__retarget_lock_acquire_recursive>
 8000776:	89a3      	ldrh	r3, [r4, #12]
 8000778:	0719      	lsls	r1, r3, #28
 800077a:	d51d      	bpl.n	80007b8 <_puts_r+0x78>
 800077c:	6923      	ldr	r3, [r4, #16]
 800077e:	b1db      	cbz	r3, 80007b8 <_puts_r+0x78>
 8000780:	3e01      	subs	r6, #1
 8000782:	68a3      	ldr	r3, [r4, #8]
 8000784:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000788:	3b01      	subs	r3, #1
 800078a:	60a3      	str	r3, [r4, #8]
 800078c:	bb39      	cbnz	r1, 80007de <_puts_r+0x9e>
 800078e:	2b00      	cmp	r3, #0
 8000790:	da38      	bge.n	8000804 <_puts_r+0xc4>
 8000792:	4622      	mov	r2, r4
 8000794:	210a      	movs	r1, #10
 8000796:	4628      	mov	r0, r5
 8000798:	f000 f848 	bl	800082c <__swbuf_r>
 800079c:	3001      	adds	r0, #1
 800079e:	d011      	beq.n	80007c4 <_puts_r+0x84>
 80007a0:	250a      	movs	r5, #10
 80007a2:	e011      	b.n	80007c8 <_puts_r+0x88>
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <_puts_r+0xd4>)
 80007a6:	429c      	cmp	r4, r3
 80007a8:	d101      	bne.n	80007ae <_puts_r+0x6e>
 80007aa:	68ac      	ldr	r4, [r5, #8]
 80007ac:	e7da      	b.n	8000764 <_puts_r+0x24>
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <_puts_r+0xd8>)
 80007b0:	429c      	cmp	r4, r3
 80007b2:	bf08      	it	eq
 80007b4:	68ec      	ldreq	r4, [r5, #12]
 80007b6:	e7d5      	b.n	8000764 <_puts_r+0x24>
 80007b8:	4621      	mov	r1, r4
 80007ba:	4628      	mov	r0, r5
 80007bc:	f000 f888 	bl	80008d0 <__swsetup_r>
 80007c0:	2800      	cmp	r0, #0
 80007c2:	d0dd      	beq.n	8000780 <_puts_r+0x40>
 80007c4:	f04f 35ff 	mov.w	r5, #4294967295
 80007c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007ca:	07da      	lsls	r2, r3, #31
 80007cc:	d405      	bmi.n	80007da <_puts_r+0x9a>
 80007ce:	89a3      	ldrh	r3, [r4, #12]
 80007d0:	059b      	lsls	r3, r3, #22
 80007d2:	d402      	bmi.n	80007da <_puts_r+0x9a>
 80007d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007d6:	f000 fa9e 	bl	8000d16 <__retarget_lock_release_recursive>
 80007da:	4628      	mov	r0, r5
 80007dc:	bd70      	pop	{r4, r5, r6, pc}
 80007de:	2b00      	cmp	r3, #0
 80007e0:	da04      	bge.n	80007ec <_puts_r+0xac>
 80007e2:	69a2      	ldr	r2, [r4, #24]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	dc06      	bgt.n	80007f6 <_puts_r+0xb6>
 80007e8:	290a      	cmp	r1, #10
 80007ea:	d004      	beq.n	80007f6 <_puts_r+0xb6>
 80007ec:	6823      	ldr	r3, [r4, #0]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	6022      	str	r2, [r4, #0]
 80007f2:	7019      	strb	r1, [r3, #0]
 80007f4:	e7c5      	b.n	8000782 <_puts_r+0x42>
 80007f6:	4622      	mov	r2, r4
 80007f8:	4628      	mov	r0, r5
 80007fa:	f000 f817 	bl	800082c <__swbuf_r>
 80007fe:	3001      	adds	r0, #1
 8000800:	d1bf      	bne.n	8000782 <_puts_r+0x42>
 8000802:	e7df      	b.n	80007c4 <_puts_r+0x84>
 8000804:	6823      	ldr	r3, [r4, #0]
 8000806:	250a      	movs	r5, #10
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	6022      	str	r2, [r4, #0]
 800080c:	701d      	strb	r5, [r3, #0]
 800080e:	e7db      	b.n	80007c8 <_puts_r+0x88>
 8000810:	08001218 	.word	0x08001218
 8000814:	08001238 	.word	0x08001238
 8000818:	080011f8 	.word	0x080011f8

0800081c <puts>:
 800081c:	4b02      	ldr	r3, [pc, #8]	; (8000828 <puts+0xc>)
 800081e:	4601      	mov	r1, r0
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	f7ff bf8d 	b.w	8000740 <_puts_r>
 8000826:	bf00      	nop
 8000828:	20000010 	.word	0x20000010

0800082c <__swbuf_r>:
 800082c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082e:	460e      	mov	r6, r1
 8000830:	4614      	mov	r4, r2
 8000832:	4605      	mov	r5, r0
 8000834:	b118      	cbz	r0, 800083e <__swbuf_r+0x12>
 8000836:	6983      	ldr	r3, [r0, #24]
 8000838:	b90b      	cbnz	r3, 800083e <__swbuf_r+0x12>
 800083a:	f000 f9cd 	bl	8000bd8 <__sinit>
 800083e:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <__swbuf_r+0x98>)
 8000840:	429c      	cmp	r4, r3
 8000842:	d12b      	bne.n	800089c <__swbuf_r+0x70>
 8000844:	686c      	ldr	r4, [r5, #4]
 8000846:	69a3      	ldr	r3, [r4, #24]
 8000848:	60a3      	str	r3, [r4, #8]
 800084a:	89a3      	ldrh	r3, [r4, #12]
 800084c:	071a      	lsls	r2, r3, #28
 800084e:	d52f      	bpl.n	80008b0 <__swbuf_r+0x84>
 8000850:	6923      	ldr	r3, [r4, #16]
 8000852:	b36b      	cbz	r3, 80008b0 <__swbuf_r+0x84>
 8000854:	6923      	ldr	r3, [r4, #16]
 8000856:	6820      	ldr	r0, [r4, #0]
 8000858:	1ac0      	subs	r0, r0, r3
 800085a:	6963      	ldr	r3, [r4, #20]
 800085c:	b2f6      	uxtb	r6, r6
 800085e:	4283      	cmp	r3, r0
 8000860:	4637      	mov	r7, r6
 8000862:	dc04      	bgt.n	800086e <__swbuf_r+0x42>
 8000864:	4621      	mov	r1, r4
 8000866:	4628      	mov	r0, r5
 8000868:	f000 f922 	bl	8000ab0 <_fflush_r>
 800086c:	bb30      	cbnz	r0, 80008bc <__swbuf_r+0x90>
 800086e:	68a3      	ldr	r3, [r4, #8]
 8000870:	3b01      	subs	r3, #1
 8000872:	60a3      	str	r3, [r4, #8]
 8000874:	6823      	ldr	r3, [r4, #0]
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	6022      	str	r2, [r4, #0]
 800087a:	701e      	strb	r6, [r3, #0]
 800087c:	6963      	ldr	r3, [r4, #20]
 800087e:	3001      	adds	r0, #1
 8000880:	4283      	cmp	r3, r0
 8000882:	d004      	beq.n	800088e <__swbuf_r+0x62>
 8000884:	89a3      	ldrh	r3, [r4, #12]
 8000886:	07db      	lsls	r3, r3, #31
 8000888:	d506      	bpl.n	8000898 <__swbuf_r+0x6c>
 800088a:	2e0a      	cmp	r6, #10
 800088c:	d104      	bne.n	8000898 <__swbuf_r+0x6c>
 800088e:	4621      	mov	r1, r4
 8000890:	4628      	mov	r0, r5
 8000892:	f000 f90d 	bl	8000ab0 <_fflush_r>
 8000896:	b988      	cbnz	r0, 80008bc <__swbuf_r+0x90>
 8000898:	4638      	mov	r0, r7
 800089a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <__swbuf_r+0x9c>)
 800089e:	429c      	cmp	r4, r3
 80008a0:	d101      	bne.n	80008a6 <__swbuf_r+0x7a>
 80008a2:	68ac      	ldr	r4, [r5, #8]
 80008a4:	e7cf      	b.n	8000846 <__swbuf_r+0x1a>
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <__swbuf_r+0xa0>)
 80008a8:	429c      	cmp	r4, r3
 80008aa:	bf08      	it	eq
 80008ac:	68ec      	ldreq	r4, [r5, #12]
 80008ae:	e7ca      	b.n	8000846 <__swbuf_r+0x1a>
 80008b0:	4621      	mov	r1, r4
 80008b2:	4628      	mov	r0, r5
 80008b4:	f000 f80c 	bl	80008d0 <__swsetup_r>
 80008b8:	2800      	cmp	r0, #0
 80008ba:	d0cb      	beq.n	8000854 <__swbuf_r+0x28>
 80008bc:	f04f 37ff 	mov.w	r7, #4294967295
 80008c0:	e7ea      	b.n	8000898 <__swbuf_r+0x6c>
 80008c2:	bf00      	nop
 80008c4:	08001218 	.word	0x08001218
 80008c8:	08001238 	.word	0x08001238
 80008cc:	080011f8 	.word	0x080011f8

080008d0 <__swsetup_r>:
 80008d0:	4b32      	ldr	r3, [pc, #200]	; (800099c <__swsetup_r+0xcc>)
 80008d2:	b570      	push	{r4, r5, r6, lr}
 80008d4:	681d      	ldr	r5, [r3, #0]
 80008d6:	4606      	mov	r6, r0
 80008d8:	460c      	mov	r4, r1
 80008da:	b125      	cbz	r5, 80008e6 <__swsetup_r+0x16>
 80008dc:	69ab      	ldr	r3, [r5, #24]
 80008de:	b913      	cbnz	r3, 80008e6 <__swsetup_r+0x16>
 80008e0:	4628      	mov	r0, r5
 80008e2:	f000 f979 	bl	8000bd8 <__sinit>
 80008e6:	4b2e      	ldr	r3, [pc, #184]	; (80009a0 <__swsetup_r+0xd0>)
 80008e8:	429c      	cmp	r4, r3
 80008ea:	d10f      	bne.n	800090c <__swsetup_r+0x3c>
 80008ec:	686c      	ldr	r4, [r5, #4]
 80008ee:	89a3      	ldrh	r3, [r4, #12]
 80008f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008f4:	0719      	lsls	r1, r3, #28
 80008f6:	d42c      	bmi.n	8000952 <__swsetup_r+0x82>
 80008f8:	06dd      	lsls	r5, r3, #27
 80008fa:	d411      	bmi.n	8000920 <__swsetup_r+0x50>
 80008fc:	2309      	movs	r3, #9
 80008fe:	6033      	str	r3, [r6, #0]
 8000900:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000904:	81a3      	strh	r3, [r4, #12]
 8000906:	f04f 30ff 	mov.w	r0, #4294967295
 800090a:	e03e      	b.n	800098a <__swsetup_r+0xba>
 800090c:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <__swsetup_r+0xd4>)
 800090e:	429c      	cmp	r4, r3
 8000910:	d101      	bne.n	8000916 <__swsetup_r+0x46>
 8000912:	68ac      	ldr	r4, [r5, #8]
 8000914:	e7eb      	b.n	80008ee <__swsetup_r+0x1e>
 8000916:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <__swsetup_r+0xd8>)
 8000918:	429c      	cmp	r4, r3
 800091a:	bf08      	it	eq
 800091c:	68ec      	ldreq	r4, [r5, #12]
 800091e:	e7e6      	b.n	80008ee <__swsetup_r+0x1e>
 8000920:	0758      	lsls	r0, r3, #29
 8000922:	d512      	bpl.n	800094a <__swsetup_r+0x7a>
 8000924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000926:	b141      	cbz	r1, 800093a <__swsetup_r+0x6a>
 8000928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800092c:	4299      	cmp	r1, r3
 800092e:	d002      	beq.n	8000936 <__swsetup_r+0x66>
 8000930:	4630      	mov	r0, r6
 8000932:	f000 fa57 	bl	8000de4 <_free_r>
 8000936:	2300      	movs	r3, #0
 8000938:	6363      	str	r3, [r4, #52]	; 0x34
 800093a:	89a3      	ldrh	r3, [r4, #12]
 800093c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000940:	81a3      	strh	r3, [r4, #12]
 8000942:	2300      	movs	r3, #0
 8000944:	6063      	str	r3, [r4, #4]
 8000946:	6923      	ldr	r3, [r4, #16]
 8000948:	6023      	str	r3, [r4, #0]
 800094a:	89a3      	ldrh	r3, [r4, #12]
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	81a3      	strh	r3, [r4, #12]
 8000952:	6923      	ldr	r3, [r4, #16]
 8000954:	b94b      	cbnz	r3, 800096a <__swsetup_r+0x9a>
 8000956:	89a3      	ldrh	r3, [r4, #12]
 8000958:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800095c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000960:	d003      	beq.n	800096a <__swsetup_r+0x9a>
 8000962:	4621      	mov	r1, r4
 8000964:	4630      	mov	r0, r6
 8000966:	f000 f9fd 	bl	8000d64 <__smakebuf_r>
 800096a:	89a0      	ldrh	r0, [r4, #12]
 800096c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000970:	f010 0301 	ands.w	r3, r0, #1
 8000974:	d00a      	beq.n	800098c <__swsetup_r+0xbc>
 8000976:	2300      	movs	r3, #0
 8000978:	60a3      	str	r3, [r4, #8]
 800097a:	6963      	ldr	r3, [r4, #20]
 800097c:	425b      	negs	r3, r3
 800097e:	61a3      	str	r3, [r4, #24]
 8000980:	6923      	ldr	r3, [r4, #16]
 8000982:	b943      	cbnz	r3, 8000996 <__swsetup_r+0xc6>
 8000984:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000988:	d1ba      	bne.n	8000900 <__swsetup_r+0x30>
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	0781      	lsls	r1, r0, #30
 800098e:	bf58      	it	pl
 8000990:	6963      	ldrpl	r3, [r4, #20]
 8000992:	60a3      	str	r3, [r4, #8]
 8000994:	e7f4      	b.n	8000980 <__swsetup_r+0xb0>
 8000996:	2000      	movs	r0, #0
 8000998:	e7f7      	b.n	800098a <__swsetup_r+0xba>
 800099a:	bf00      	nop
 800099c:	20000010 	.word	0x20000010
 80009a0:	08001218 	.word	0x08001218
 80009a4:	08001238 	.word	0x08001238
 80009a8:	080011f8 	.word	0x080011f8

080009ac <__sflush_r>:
 80009ac:	898a      	ldrh	r2, [r1, #12]
 80009ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b0:	4605      	mov	r5, r0
 80009b2:	0710      	lsls	r0, r2, #28
 80009b4:	460c      	mov	r4, r1
 80009b6:	d457      	bmi.n	8000a68 <__sflush_r+0xbc>
 80009b8:	684b      	ldr	r3, [r1, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	dc04      	bgt.n	80009c8 <__sflush_r+0x1c>
 80009be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	dc01      	bgt.n	80009c8 <__sflush_r+0x1c>
 80009c4:	2000      	movs	r0, #0
 80009c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009ca:	2e00      	cmp	r6, #0
 80009cc:	d0fa      	beq.n	80009c4 <__sflush_r+0x18>
 80009ce:	2300      	movs	r3, #0
 80009d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80009d4:	682f      	ldr	r7, [r5, #0]
 80009d6:	602b      	str	r3, [r5, #0]
 80009d8:	d032      	beq.n	8000a40 <__sflush_r+0x94>
 80009da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80009dc:	89a3      	ldrh	r3, [r4, #12]
 80009de:	075a      	lsls	r2, r3, #29
 80009e0:	d505      	bpl.n	80009ee <__sflush_r+0x42>
 80009e2:	6863      	ldr	r3, [r4, #4]
 80009e4:	1ac0      	subs	r0, r0, r3
 80009e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80009e8:	b10b      	cbz	r3, 80009ee <__sflush_r+0x42>
 80009ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009ec:	1ac0      	subs	r0, r0, r3
 80009ee:	2300      	movs	r3, #0
 80009f0:	4602      	mov	r2, r0
 80009f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009f4:	6a21      	ldr	r1, [r4, #32]
 80009f6:	4628      	mov	r0, r5
 80009f8:	47b0      	blx	r6
 80009fa:	1c43      	adds	r3, r0, #1
 80009fc:	89a3      	ldrh	r3, [r4, #12]
 80009fe:	d106      	bne.n	8000a0e <__sflush_r+0x62>
 8000a00:	6829      	ldr	r1, [r5, #0]
 8000a02:	291d      	cmp	r1, #29
 8000a04:	d82c      	bhi.n	8000a60 <__sflush_r+0xb4>
 8000a06:	4a29      	ldr	r2, [pc, #164]	; (8000aac <__sflush_r+0x100>)
 8000a08:	40ca      	lsrs	r2, r1
 8000a0a:	07d6      	lsls	r6, r2, #31
 8000a0c:	d528      	bpl.n	8000a60 <__sflush_r+0xb4>
 8000a0e:	2200      	movs	r2, #0
 8000a10:	6062      	str	r2, [r4, #4]
 8000a12:	04d9      	lsls	r1, r3, #19
 8000a14:	6922      	ldr	r2, [r4, #16]
 8000a16:	6022      	str	r2, [r4, #0]
 8000a18:	d504      	bpl.n	8000a24 <__sflush_r+0x78>
 8000a1a:	1c42      	adds	r2, r0, #1
 8000a1c:	d101      	bne.n	8000a22 <__sflush_r+0x76>
 8000a1e:	682b      	ldr	r3, [r5, #0]
 8000a20:	b903      	cbnz	r3, 8000a24 <__sflush_r+0x78>
 8000a22:	6560      	str	r0, [r4, #84]	; 0x54
 8000a24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a26:	602f      	str	r7, [r5, #0]
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	d0cb      	beq.n	80009c4 <__sflush_r+0x18>
 8000a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a30:	4299      	cmp	r1, r3
 8000a32:	d002      	beq.n	8000a3a <__sflush_r+0x8e>
 8000a34:	4628      	mov	r0, r5
 8000a36:	f000 f9d5 	bl	8000de4 <_free_r>
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	6360      	str	r0, [r4, #52]	; 0x34
 8000a3e:	e7c2      	b.n	80009c6 <__sflush_r+0x1a>
 8000a40:	6a21      	ldr	r1, [r4, #32]
 8000a42:	2301      	movs	r3, #1
 8000a44:	4628      	mov	r0, r5
 8000a46:	47b0      	blx	r6
 8000a48:	1c41      	adds	r1, r0, #1
 8000a4a:	d1c7      	bne.n	80009dc <__sflush_r+0x30>
 8000a4c:	682b      	ldr	r3, [r5, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0c4      	beq.n	80009dc <__sflush_r+0x30>
 8000a52:	2b1d      	cmp	r3, #29
 8000a54:	d001      	beq.n	8000a5a <__sflush_r+0xae>
 8000a56:	2b16      	cmp	r3, #22
 8000a58:	d101      	bne.n	8000a5e <__sflush_r+0xb2>
 8000a5a:	602f      	str	r7, [r5, #0]
 8000a5c:	e7b2      	b.n	80009c4 <__sflush_r+0x18>
 8000a5e:	89a3      	ldrh	r3, [r4, #12]
 8000a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a64:	81a3      	strh	r3, [r4, #12]
 8000a66:	e7ae      	b.n	80009c6 <__sflush_r+0x1a>
 8000a68:	690f      	ldr	r7, [r1, #16]
 8000a6a:	2f00      	cmp	r7, #0
 8000a6c:	d0aa      	beq.n	80009c4 <__sflush_r+0x18>
 8000a6e:	0793      	lsls	r3, r2, #30
 8000a70:	680e      	ldr	r6, [r1, #0]
 8000a72:	bf08      	it	eq
 8000a74:	694b      	ldreq	r3, [r1, #20]
 8000a76:	600f      	str	r7, [r1, #0]
 8000a78:	bf18      	it	ne
 8000a7a:	2300      	movne	r3, #0
 8000a7c:	1bf6      	subs	r6, r6, r7
 8000a7e:	608b      	str	r3, [r1, #8]
 8000a80:	2e00      	cmp	r6, #0
 8000a82:	dd9f      	ble.n	80009c4 <__sflush_r+0x18>
 8000a84:	6a21      	ldr	r1, [r4, #32]
 8000a86:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000a8a:	4633      	mov	r3, r6
 8000a8c:	463a      	mov	r2, r7
 8000a8e:	4628      	mov	r0, r5
 8000a90:	47e0      	blx	ip
 8000a92:	2800      	cmp	r0, #0
 8000a94:	dc06      	bgt.n	8000aa4 <__sflush_r+0xf8>
 8000a96:	89a3      	ldrh	r3, [r4, #12]
 8000a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a9c:	81a3      	strh	r3, [r4, #12]
 8000a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa2:	e790      	b.n	80009c6 <__sflush_r+0x1a>
 8000aa4:	4407      	add	r7, r0
 8000aa6:	1a36      	subs	r6, r6, r0
 8000aa8:	e7ea      	b.n	8000a80 <__sflush_r+0xd4>
 8000aaa:	bf00      	nop
 8000aac:	20400001 	.word	0x20400001

08000ab0 <_fflush_r>:
 8000ab0:	b538      	push	{r3, r4, r5, lr}
 8000ab2:	690b      	ldr	r3, [r1, #16]
 8000ab4:	4605      	mov	r5, r0
 8000ab6:	460c      	mov	r4, r1
 8000ab8:	b913      	cbnz	r3, 8000ac0 <_fflush_r+0x10>
 8000aba:	2500      	movs	r5, #0
 8000abc:	4628      	mov	r0, r5
 8000abe:	bd38      	pop	{r3, r4, r5, pc}
 8000ac0:	b118      	cbz	r0, 8000aca <_fflush_r+0x1a>
 8000ac2:	6983      	ldr	r3, [r0, #24]
 8000ac4:	b90b      	cbnz	r3, 8000aca <_fflush_r+0x1a>
 8000ac6:	f000 f887 	bl	8000bd8 <__sinit>
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <_fflush_r+0x6c>)
 8000acc:	429c      	cmp	r4, r3
 8000ace:	d11b      	bne.n	8000b08 <_fflush_r+0x58>
 8000ad0:	686c      	ldr	r4, [r5, #4]
 8000ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d0ef      	beq.n	8000aba <_fflush_r+0xa>
 8000ada:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000adc:	07d0      	lsls	r0, r2, #31
 8000ade:	d404      	bmi.n	8000aea <_fflush_r+0x3a>
 8000ae0:	0599      	lsls	r1, r3, #22
 8000ae2:	d402      	bmi.n	8000aea <_fflush_r+0x3a>
 8000ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ae6:	f000 f915 	bl	8000d14 <__retarget_lock_acquire_recursive>
 8000aea:	4628      	mov	r0, r5
 8000aec:	4621      	mov	r1, r4
 8000aee:	f7ff ff5d 	bl	80009ac <__sflush_r>
 8000af2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000af4:	07da      	lsls	r2, r3, #31
 8000af6:	4605      	mov	r5, r0
 8000af8:	d4e0      	bmi.n	8000abc <_fflush_r+0xc>
 8000afa:	89a3      	ldrh	r3, [r4, #12]
 8000afc:	059b      	lsls	r3, r3, #22
 8000afe:	d4dd      	bmi.n	8000abc <_fflush_r+0xc>
 8000b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b02:	f000 f908 	bl	8000d16 <__retarget_lock_release_recursive>
 8000b06:	e7d9      	b.n	8000abc <_fflush_r+0xc>
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <_fflush_r+0x70>)
 8000b0a:	429c      	cmp	r4, r3
 8000b0c:	d101      	bne.n	8000b12 <_fflush_r+0x62>
 8000b0e:	68ac      	ldr	r4, [r5, #8]
 8000b10:	e7df      	b.n	8000ad2 <_fflush_r+0x22>
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <_fflush_r+0x74>)
 8000b14:	429c      	cmp	r4, r3
 8000b16:	bf08      	it	eq
 8000b18:	68ec      	ldreq	r4, [r5, #12]
 8000b1a:	e7da      	b.n	8000ad2 <_fflush_r+0x22>
 8000b1c:	08001218 	.word	0x08001218
 8000b20:	08001238 	.word	0x08001238
 8000b24:	080011f8 	.word	0x080011f8

08000b28 <std>:
 8000b28:	2300      	movs	r3, #0
 8000b2a:	b510      	push	{r4, lr}
 8000b2c:	4604      	mov	r4, r0
 8000b2e:	e9c0 3300 	strd	r3, r3, [r0]
 8000b32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b36:	6083      	str	r3, [r0, #8]
 8000b38:	8181      	strh	r1, [r0, #12]
 8000b3a:	6643      	str	r3, [r0, #100]	; 0x64
 8000b3c:	81c2      	strh	r2, [r0, #14]
 8000b3e:	6183      	str	r3, [r0, #24]
 8000b40:	4619      	mov	r1, r3
 8000b42:	2208      	movs	r2, #8
 8000b44:	305c      	adds	r0, #92	; 0x5c
 8000b46:	f7ff fdf3 	bl	8000730 <memset>
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <std+0x38>)
 8000b4c:	6263      	str	r3, [r4, #36]	; 0x24
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <std+0x3c>)
 8000b50:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b52:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <std+0x40>)
 8000b54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <std+0x44>)
 8000b58:	6224      	str	r4, [r4, #32]
 8000b5a:	6323      	str	r3, [r4, #48]	; 0x30
 8000b5c:	bd10      	pop	{r4, pc}
 8000b5e:	bf00      	nop
 8000b60:	08000fc1 	.word	0x08000fc1
 8000b64:	08000fe3 	.word	0x08000fe3
 8000b68:	0800101b 	.word	0x0800101b
 8000b6c:	0800103f 	.word	0x0800103f

08000b70 <_cleanup_r>:
 8000b70:	4901      	ldr	r1, [pc, #4]	; (8000b78 <_cleanup_r+0x8>)
 8000b72:	f000 b8af 	b.w	8000cd4 <_fwalk_reent>
 8000b76:	bf00      	nop
 8000b78:	08000ab1 	.word	0x08000ab1

08000b7c <__sfmoreglue>:
 8000b7c:	b570      	push	{r4, r5, r6, lr}
 8000b7e:	2268      	movs	r2, #104	; 0x68
 8000b80:	1e4d      	subs	r5, r1, #1
 8000b82:	4355      	muls	r5, r2
 8000b84:	460e      	mov	r6, r1
 8000b86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b8a:	f000 f995 	bl	8000eb8 <_malloc_r>
 8000b8e:	4604      	mov	r4, r0
 8000b90:	b140      	cbz	r0, 8000ba4 <__sfmoreglue+0x28>
 8000b92:	2100      	movs	r1, #0
 8000b94:	e9c0 1600 	strd	r1, r6, [r0]
 8000b98:	300c      	adds	r0, #12
 8000b9a:	60a0      	str	r0, [r4, #8]
 8000b9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000ba0:	f7ff fdc6 	bl	8000730 <memset>
 8000ba4:	4620      	mov	r0, r4
 8000ba6:	bd70      	pop	{r4, r5, r6, pc}

08000ba8 <__sfp_lock_acquire>:
 8000ba8:	4801      	ldr	r0, [pc, #4]	; (8000bb0 <__sfp_lock_acquire+0x8>)
 8000baa:	f000 b8b3 	b.w	8000d14 <__retarget_lock_acquire_recursive>
 8000bae:	bf00      	nop
 8000bb0:	200000a9 	.word	0x200000a9

08000bb4 <__sfp_lock_release>:
 8000bb4:	4801      	ldr	r0, [pc, #4]	; (8000bbc <__sfp_lock_release+0x8>)
 8000bb6:	f000 b8ae 	b.w	8000d16 <__retarget_lock_release_recursive>
 8000bba:	bf00      	nop
 8000bbc:	200000a9 	.word	0x200000a9

08000bc0 <__sinit_lock_acquire>:
 8000bc0:	4801      	ldr	r0, [pc, #4]	; (8000bc8 <__sinit_lock_acquire+0x8>)
 8000bc2:	f000 b8a7 	b.w	8000d14 <__retarget_lock_acquire_recursive>
 8000bc6:	bf00      	nop
 8000bc8:	200000aa 	.word	0x200000aa

08000bcc <__sinit_lock_release>:
 8000bcc:	4801      	ldr	r0, [pc, #4]	; (8000bd4 <__sinit_lock_release+0x8>)
 8000bce:	f000 b8a2 	b.w	8000d16 <__retarget_lock_release_recursive>
 8000bd2:	bf00      	nop
 8000bd4:	200000aa 	.word	0x200000aa

08000bd8 <__sinit>:
 8000bd8:	b510      	push	{r4, lr}
 8000bda:	4604      	mov	r4, r0
 8000bdc:	f7ff fff0 	bl	8000bc0 <__sinit_lock_acquire>
 8000be0:	69a3      	ldr	r3, [r4, #24]
 8000be2:	b11b      	cbz	r3, 8000bec <__sinit+0x14>
 8000be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000be8:	f7ff bff0 	b.w	8000bcc <__sinit_lock_release>
 8000bec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000bf0:	6523      	str	r3, [r4, #80]	; 0x50
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <__sinit+0x68>)
 8000bf4:	4a13      	ldr	r2, [pc, #76]	; (8000c44 <__sinit+0x6c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	62a2      	str	r2, [r4, #40]	; 0x28
 8000bfa:	42a3      	cmp	r3, r4
 8000bfc:	bf04      	itt	eq
 8000bfe:	2301      	moveq	r3, #1
 8000c00:	61a3      	streq	r3, [r4, #24]
 8000c02:	4620      	mov	r0, r4
 8000c04:	f000 f820 	bl	8000c48 <__sfp>
 8000c08:	6060      	str	r0, [r4, #4]
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	f000 f81c 	bl	8000c48 <__sfp>
 8000c10:	60a0      	str	r0, [r4, #8]
 8000c12:	4620      	mov	r0, r4
 8000c14:	f000 f818 	bl	8000c48 <__sfp>
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60e0      	str	r0, [r4, #12]
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	6860      	ldr	r0, [r4, #4]
 8000c20:	f7ff ff82 	bl	8000b28 <std>
 8000c24:	68a0      	ldr	r0, [r4, #8]
 8000c26:	2201      	movs	r2, #1
 8000c28:	2109      	movs	r1, #9
 8000c2a:	f7ff ff7d 	bl	8000b28 <std>
 8000c2e:	68e0      	ldr	r0, [r4, #12]
 8000c30:	2202      	movs	r2, #2
 8000c32:	2112      	movs	r1, #18
 8000c34:	f7ff ff78 	bl	8000b28 <std>
 8000c38:	2301      	movs	r3, #1
 8000c3a:	61a3      	str	r3, [r4, #24]
 8000c3c:	e7d2      	b.n	8000be4 <__sinit+0xc>
 8000c3e:	bf00      	nop
 8000c40:	080011f4 	.word	0x080011f4
 8000c44:	08000b71 	.word	0x08000b71

08000c48 <__sfp>:
 8000c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c4a:	4607      	mov	r7, r0
 8000c4c:	f7ff ffac 	bl	8000ba8 <__sfp_lock_acquire>
 8000c50:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <__sfp+0x84>)
 8000c52:	681e      	ldr	r6, [r3, #0]
 8000c54:	69b3      	ldr	r3, [r6, #24]
 8000c56:	b913      	cbnz	r3, 8000c5e <__sfp+0x16>
 8000c58:	4630      	mov	r0, r6
 8000c5a:	f7ff ffbd 	bl	8000bd8 <__sinit>
 8000c5e:	3648      	adds	r6, #72	; 0x48
 8000c60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	d503      	bpl.n	8000c70 <__sfp+0x28>
 8000c68:	6833      	ldr	r3, [r6, #0]
 8000c6a:	b30b      	cbz	r3, 8000cb0 <__sfp+0x68>
 8000c6c:	6836      	ldr	r6, [r6, #0]
 8000c6e:	e7f7      	b.n	8000c60 <__sfp+0x18>
 8000c70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c74:	b9d5      	cbnz	r5, 8000cac <__sfp+0x64>
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <__sfp+0x88>)
 8000c78:	60e3      	str	r3, [r4, #12]
 8000c7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c7e:	6665      	str	r5, [r4, #100]	; 0x64
 8000c80:	f000 f847 	bl	8000d12 <__retarget_lock_init_recursive>
 8000c84:	f7ff ff96 	bl	8000bb4 <__sfp_lock_release>
 8000c88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c90:	6025      	str	r5, [r4, #0]
 8000c92:	61a5      	str	r5, [r4, #24]
 8000c94:	2208      	movs	r2, #8
 8000c96:	4629      	mov	r1, r5
 8000c98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c9c:	f7ff fd48 	bl	8000730 <memset>
 8000ca0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000ca4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000ca8:	4620      	mov	r0, r4
 8000caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cac:	3468      	adds	r4, #104	; 0x68
 8000cae:	e7d9      	b.n	8000c64 <__sfp+0x1c>
 8000cb0:	2104      	movs	r1, #4
 8000cb2:	4638      	mov	r0, r7
 8000cb4:	f7ff ff62 	bl	8000b7c <__sfmoreglue>
 8000cb8:	4604      	mov	r4, r0
 8000cba:	6030      	str	r0, [r6, #0]
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	d1d5      	bne.n	8000c6c <__sfp+0x24>
 8000cc0:	f7ff ff78 	bl	8000bb4 <__sfp_lock_release>
 8000cc4:	230c      	movs	r3, #12
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	e7ee      	b.n	8000ca8 <__sfp+0x60>
 8000cca:	bf00      	nop
 8000ccc:	080011f4 	.word	0x080011f4
 8000cd0:	ffff0001 	.word	0xffff0001

08000cd4 <_fwalk_reent>:
 8000cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cd8:	4606      	mov	r6, r0
 8000cda:	4688      	mov	r8, r1
 8000cdc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000ce0:	2700      	movs	r7, #0
 8000ce2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000ce6:	f1b9 0901 	subs.w	r9, r9, #1
 8000cea:	d505      	bpl.n	8000cf8 <_fwalk_reent+0x24>
 8000cec:	6824      	ldr	r4, [r4, #0]
 8000cee:	2c00      	cmp	r4, #0
 8000cf0:	d1f7      	bne.n	8000ce2 <_fwalk_reent+0xe>
 8000cf2:	4638      	mov	r0, r7
 8000cf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cf8:	89ab      	ldrh	r3, [r5, #12]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d907      	bls.n	8000d0e <_fwalk_reent+0x3a>
 8000cfe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d02:	3301      	adds	r3, #1
 8000d04:	d003      	beq.n	8000d0e <_fwalk_reent+0x3a>
 8000d06:	4629      	mov	r1, r5
 8000d08:	4630      	mov	r0, r6
 8000d0a:	47c0      	blx	r8
 8000d0c:	4307      	orrs	r7, r0
 8000d0e:	3568      	adds	r5, #104	; 0x68
 8000d10:	e7e9      	b.n	8000ce6 <_fwalk_reent+0x12>

08000d12 <__retarget_lock_init_recursive>:
 8000d12:	4770      	bx	lr

08000d14 <__retarget_lock_acquire_recursive>:
 8000d14:	4770      	bx	lr

08000d16 <__retarget_lock_release_recursive>:
 8000d16:	4770      	bx	lr

08000d18 <__swhatbuf_r>:
 8000d18:	b570      	push	{r4, r5, r6, lr}
 8000d1a:	460e      	mov	r6, r1
 8000d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d20:	2900      	cmp	r1, #0
 8000d22:	b096      	sub	sp, #88	; 0x58
 8000d24:	4614      	mov	r4, r2
 8000d26:	461d      	mov	r5, r3
 8000d28:	da08      	bge.n	8000d3c <__swhatbuf_r+0x24>
 8000d2a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	602a      	str	r2, [r5, #0]
 8000d32:	061a      	lsls	r2, r3, #24
 8000d34:	d410      	bmi.n	8000d58 <__swhatbuf_r+0x40>
 8000d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3a:	e00e      	b.n	8000d5a <__swhatbuf_r+0x42>
 8000d3c:	466a      	mov	r2, sp
 8000d3e:	f000 f9a5 	bl	800108c <_fstat_r>
 8000d42:	2800      	cmp	r0, #0
 8000d44:	dbf1      	blt.n	8000d2a <__swhatbuf_r+0x12>
 8000d46:	9a01      	ldr	r2, [sp, #4]
 8000d48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000d4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000d50:	425a      	negs	r2, r3
 8000d52:	415a      	adcs	r2, r3
 8000d54:	602a      	str	r2, [r5, #0]
 8000d56:	e7ee      	b.n	8000d36 <__swhatbuf_r+0x1e>
 8000d58:	2340      	movs	r3, #64	; 0x40
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	6023      	str	r3, [r4, #0]
 8000d5e:	b016      	add	sp, #88	; 0x58
 8000d60:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d64 <__smakebuf_r>:
 8000d64:	898b      	ldrh	r3, [r1, #12]
 8000d66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d68:	079d      	lsls	r5, r3, #30
 8000d6a:	4606      	mov	r6, r0
 8000d6c:	460c      	mov	r4, r1
 8000d6e:	d507      	bpl.n	8000d80 <__smakebuf_r+0x1c>
 8000d70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d74:	6023      	str	r3, [r4, #0]
 8000d76:	6123      	str	r3, [r4, #16]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	6163      	str	r3, [r4, #20]
 8000d7c:	b002      	add	sp, #8
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
 8000d80:	ab01      	add	r3, sp, #4
 8000d82:	466a      	mov	r2, sp
 8000d84:	f7ff ffc8 	bl	8000d18 <__swhatbuf_r>
 8000d88:	9900      	ldr	r1, [sp, #0]
 8000d8a:	4605      	mov	r5, r0
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	f000 f893 	bl	8000eb8 <_malloc_r>
 8000d92:	b948      	cbnz	r0, 8000da8 <__smakebuf_r+0x44>
 8000d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d98:	059a      	lsls	r2, r3, #22
 8000d9a:	d4ef      	bmi.n	8000d7c <__smakebuf_r+0x18>
 8000d9c:	f023 0303 	bic.w	r3, r3, #3
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	81a3      	strh	r3, [r4, #12]
 8000da6:	e7e3      	b.n	8000d70 <__smakebuf_r+0xc>
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <__smakebuf_r+0x7c>)
 8000daa:	62b3      	str	r3, [r6, #40]	; 0x28
 8000dac:	89a3      	ldrh	r3, [r4, #12]
 8000dae:	6020      	str	r0, [r4, #0]
 8000db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db4:	81a3      	strh	r3, [r4, #12]
 8000db6:	9b00      	ldr	r3, [sp, #0]
 8000db8:	6163      	str	r3, [r4, #20]
 8000dba:	9b01      	ldr	r3, [sp, #4]
 8000dbc:	6120      	str	r0, [r4, #16]
 8000dbe:	b15b      	cbz	r3, 8000dd8 <__smakebuf_r+0x74>
 8000dc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	f000 f973 	bl	80010b0 <_isatty_r>
 8000dca:	b128      	cbz	r0, 8000dd8 <__smakebuf_r+0x74>
 8000dcc:	89a3      	ldrh	r3, [r4, #12]
 8000dce:	f023 0303 	bic.w	r3, r3, #3
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	81a3      	strh	r3, [r4, #12]
 8000dd8:	89a0      	ldrh	r0, [r4, #12]
 8000dda:	4305      	orrs	r5, r0
 8000ddc:	81a5      	strh	r5, [r4, #12]
 8000dde:	e7cd      	b.n	8000d7c <__smakebuf_r+0x18>
 8000de0:	08000b71 	.word	0x08000b71

08000de4 <_free_r>:
 8000de4:	b538      	push	{r3, r4, r5, lr}
 8000de6:	4605      	mov	r5, r0
 8000de8:	2900      	cmp	r1, #0
 8000dea:	d041      	beq.n	8000e70 <_free_r+0x8c>
 8000dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000df0:	1f0c      	subs	r4, r1, #4
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	bfb8      	it	lt
 8000df6:	18e4      	addlt	r4, r4, r3
 8000df8:	f000 f97c 	bl	80010f4 <__malloc_lock>
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <_free_r+0x90>)
 8000dfe:	6813      	ldr	r3, [r2, #0]
 8000e00:	b933      	cbnz	r3, 8000e10 <_free_r+0x2c>
 8000e02:	6063      	str	r3, [r4, #4]
 8000e04:	6014      	str	r4, [r2, #0]
 8000e06:	4628      	mov	r0, r5
 8000e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e0c:	f000 b978 	b.w	8001100 <__malloc_unlock>
 8000e10:	42a3      	cmp	r3, r4
 8000e12:	d908      	bls.n	8000e26 <_free_r+0x42>
 8000e14:	6820      	ldr	r0, [r4, #0]
 8000e16:	1821      	adds	r1, r4, r0
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	bf01      	itttt	eq
 8000e1c:	6819      	ldreq	r1, [r3, #0]
 8000e1e:	685b      	ldreq	r3, [r3, #4]
 8000e20:	1809      	addeq	r1, r1, r0
 8000e22:	6021      	streq	r1, [r4, #0]
 8000e24:	e7ed      	b.n	8000e02 <_free_r+0x1e>
 8000e26:	461a      	mov	r2, r3
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	b10b      	cbz	r3, 8000e30 <_free_r+0x4c>
 8000e2c:	42a3      	cmp	r3, r4
 8000e2e:	d9fa      	bls.n	8000e26 <_free_r+0x42>
 8000e30:	6811      	ldr	r1, [r2, #0]
 8000e32:	1850      	adds	r0, r2, r1
 8000e34:	42a0      	cmp	r0, r4
 8000e36:	d10b      	bne.n	8000e50 <_free_r+0x6c>
 8000e38:	6820      	ldr	r0, [r4, #0]
 8000e3a:	4401      	add	r1, r0
 8000e3c:	1850      	adds	r0, r2, r1
 8000e3e:	4283      	cmp	r3, r0
 8000e40:	6011      	str	r1, [r2, #0]
 8000e42:	d1e0      	bne.n	8000e06 <_free_r+0x22>
 8000e44:	6818      	ldr	r0, [r3, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	6053      	str	r3, [r2, #4]
 8000e4a:	4401      	add	r1, r0
 8000e4c:	6011      	str	r1, [r2, #0]
 8000e4e:	e7da      	b.n	8000e06 <_free_r+0x22>
 8000e50:	d902      	bls.n	8000e58 <_free_r+0x74>
 8000e52:	230c      	movs	r3, #12
 8000e54:	602b      	str	r3, [r5, #0]
 8000e56:	e7d6      	b.n	8000e06 <_free_r+0x22>
 8000e58:	6820      	ldr	r0, [r4, #0]
 8000e5a:	1821      	adds	r1, r4, r0
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	bf04      	itt	eq
 8000e60:	6819      	ldreq	r1, [r3, #0]
 8000e62:	685b      	ldreq	r3, [r3, #4]
 8000e64:	6063      	str	r3, [r4, #4]
 8000e66:	bf04      	itt	eq
 8000e68:	1809      	addeq	r1, r1, r0
 8000e6a:	6021      	streq	r1, [r4, #0]
 8000e6c:	6054      	str	r4, [r2, #4]
 8000e6e:	e7ca      	b.n	8000e06 <_free_r+0x22>
 8000e70:	bd38      	pop	{r3, r4, r5, pc}
 8000e72:	bf00      	nop
 8000e74:	200000ac 	.word	0x200000ac

08000e78 <sbrk_aligned>:
 8000e78:	b570      	push	{r4, r5, r6, lr}
 8000e7a:	4e0e      	ldr	r6, [pc, #56]	; (8000eb4 <sbrk_aligned+0x3c>)
 8000e7c:	460c      	mov	r4, r1
 8000e7e:	6831      	ldr	r1, [r6, #0]
 8000e80:	4605      	mov	r5, r0
 8000e82:	b911      	cbnz	r1, 8000e8a <sbrk_aligned+0x12>
 8000e84:	f000 f88c 	bl	8000fa0 <_sbrk_r>
 8000e88:	6030      	str	r0, [r6, #0]
 8000e8a:	4621      	mov	r1, r4
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	f000 f887 	bl	8000fa0 <_sbrk_r>
 8000e92:	1c43      	adds	r3, r0, #1
 8000e94:	d00a      	beq.n	8000eac <sbrk_aligned+0x34>
 8000e96:	1cc4      	adds	r4, r0, #3
 8000e98:	f024 0403 	bic.w	r4, r4, #3
 8000e9c:	42a0      	cmp	r0, r4
 8000e9e:	d007      	beq.n	8000eb0 <sbrk_aligned+0x38>
 8000ea0:	1a21      	subs	r1, r4, r0
 8000ea2:	4628      	mov	r0, r5
 8000ea4:	f000 f87c 	bl	8000fa0 <_sbrk_r>
 8000ea8:	3001      	adds	r0, #1
 8000eaa:	d101      	bne.n	8000eb0 <sbrk_aligned+0x38>
 8000eac:	f04f 34ff 	mov.w	r4, #4294967295
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	bd70      	pop	{r4, r5, r6, pc}
 8000eb4:	200000b0 	.word	0x200000b0

08000eb8 <_malloc_r>:
 8000eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ebc:	1ccd      	adds	r5, r1, #3
 8000ebe:	f025 0503 	bic.w	r5, r5, #3
 8000ec2:	3508      	adds	r5, #8
 8000ec4:	2d0c      	cmp	r5, #12
 8000ec6:	bf38      	it	cc
 8000ec8:	250c      	movcc	r5, #12
 8000eca:	2d00      	cmp	r5, #0
 8000ecc:	4607      	mov	r7, r0
 8000ece:	db01      	blt.n	8000ed4 <_malloc_r+0x1c>
 8000ed0:	42a9      	cmp	r1, r5
 8000ed2:	d905      	bls.n	8000ee0 <_malloc_r+0x28>
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	2600      	movs	r6, #0
 8000eda:	4630      	mov	r0, r6
 8000edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ee0:	4e2e      	ldr	r6, [pc, #184]	; (8000f9c <_malloc_r+0xe4>)
 8000ee2:	f000 f907 	bl	80010f4 <__malloc_lock>
 8000ee6:	6833      	ldr	r3, [r6, #0]
 8000ee8:	461c      	mov	r4, r3
 8000eea:	bb34      	cbnz	r4, 8000f3a <_malloc_r+0x82>
 8000eec:	4629      	mov	r1, r5
 8000eee:	4638      	mov	r0, r7
 8000ef0:	f7ff ffc2 	bl	8000e78 <sbrk_aligned>
 8000ef4:	1c43      	adds	r3, r0, #1
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	d14d      	bne.n	8000f96 <_malloc_r+0xde>
 8000efa:	6834      	ldr	r4, [r6, #0]
 8000efc:	4626      	mov	r6, r4
 8000efe:	2e00      	cmp	r6, #0
 8000f00:	d140      	bne.n	8000f84 <_malloc_r+0xcc>
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	4631      	mov	r1, r6
 8000f06:	4638      	mov	r0, r7
 8000f08:	eb04 0803 	add.w	r8, r4, r3
 8000f0c:	f000 f848 	bl	8000fa0 <_sbrk_r>
 8000f10:	4580      	cmp	r8, r0
 8000f12:	d13a      	bne.n	8000f8a <_malloc_r+0xd2>
 8000f14:	6821      	ldr	r1, [r4, #0]
 8000f16:	3503      	adds	r5, #3
 8000f18:	1a6d      	subs	r5, r5, r1
 8000f1a:	f025 0503 	bic.w	r5, r5, #3
 8000f1e:	3508      	adds	r5, #8
 8000f20:	2d0c      	cmp	r5, #12
 8000f22:	bf38      	it	cc
 8000f24:	250c      	movcc	r5, #12
 8000f26:	4629      	mov	r1, r5
 8000f28:	4638      	mov	r0, r7
 8000f2a:	f7ff ffa5 	bl	8000e78 <sbrk_aligned>
 8000f2e:	3001      	adds	r0, #1
 8000f30:	d02b      	beq.n	8000f8a <_malloc_r+0xd2>
 8000f32:	6823      	ldr	r3, [r4, #0]
 8000f34:	442b      	add	r3, r5
 8000f36:	6023      	str	r3, [r4, #0]
 8000f38:	e00e      	b.n	8000f58 <_malloc_r+0xa0>
 8000f3a:	6822      	ldr	r2, [r4, #0]
 8000f3c:	1b52      	subs	r2, r2, r5
 8000f3e:	d41e      	bmi.n	8000f7e <_malloc_r+0xc6>
 8000f40:	2a0b      	cmp	r2, #11
 8000f42:	d916      	bls.n	8000f72 <_malloc_r+0xba>
 8000f44:	1961      	adds	r1, r4, r5
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	6025      	str	r5, [r4, #0]
 8000f4a:	bf18      	it	ne
 8000f4c:	6059      	strne	r1, [r3, #4]
 8000f4e:	6863      	ldr	r3, [r4, #4]
 8000f50:	bf08      	it	eq
 8000f52:	6031      	streq	r1, [r6, #0]
 8000f54:	5162      	str	r2, [r4, r5]
 8000f56:	604b      	str	r3, [r1, #4]
 8000f58:	4638      	mov	r0, r7
 8000f5a:	f104 060b 	add.w	r6, r4, #11
 8000f5e:	f000 f8cf 	bl	8001100 <__malloc_unlock>
 8000f62:	f026 0607 	bic.w	r6, r6, #7
 8000f66:	1d23      	adds	r3, r4, #4
 8000f68:	1af2      	subs	r2, r6, r3
 8000f6a:	d0b6      	beq.n	8000eda <_malloc_r+0x22>
 8000f6c:	1b9b      	subs	r3, r3, r6
 8000f6e:	50a3      	str	r3, [r4, r2]
 8000f70:	e7b3      	b.n	8000eda <_malloc_r+0x22>
 8000f72:	6862      	ldr	r2, [r4, #4]
 8000f74:	42a3      	cmp	r3, r4
 8000f76:	bf0c      	ite	eq
 8000f78:	6032      	streq	r2, [r6, #0]
 8000f7a:	605a      	strne	r2, [r3, #4]
 8000f7c:	e7ec      	b.n	8000f58 <_malloc_r+0xa0>
 8000f7e:	4623      	mov	r3, r4
 8000f80:	6864      	ldr	r4, [r4, #4]
 8000f82:	e7b2      	b.n	8000eea <_malloc_r+0x32>
 8000f84:	4634      	mov	r4, r6
 8000f86:	6876      	ldr	r6, [r6, #4]
 8000f88:	e7b9      	b.n	8000efe <_malloc_r+0x46>
 8000f8a:	230c      	movs	r3, #12
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	4638      	mov	r0, r7
 8000f90:	f000 f8b6 	bl	8001100 <__malloc_unlock>
 8000f94:	e7a1      	b.n	8000eda <_malloc_r+0x22>
 8000f96:	6025      	str	r5, [r4, #0]
 8000f98:	e7de      	b.n	8000f58 <_malloc_r+0xa0>
 8000f9a:	bf00      	nop
 8000f9c:	200000ac 	.word	0x200000ac

08000fa0 <_sbrk_r>:
 8000fa0:	b538      	push	{r3, r4, r5, lr}
 8000fa2:	4d06      	ldr	r5, [pc, #24]	; (8000fbc <_sbrk_r+0x1c>)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	4608      	mov	r0, r1
 8000faa:	602b      	str	r3, [r5, #0]
 8000fac:	f7ff fb36 	bl	800061c <_sbrk>
 8000fb0:	1c43      	adds	r3, r0, #1
 8000fb2:	d102      	bne.n	8000fba <_sbrk_r+0x1a>
 8000fb4:	682b      	ldr	r3, [r5, #0]
 8000fb6:	b103      	cbz	r3, 8000fba <_sbrk_r+0x1a>
 8000fb8:	6023      	str	r3, [r4, #0]
 8000fba:	bd38      	pop	{r3, r4, r5, pc}
 8000fbc:	200000b4 	.word	0x200000b4

08000fc0 <__sread>:
 8000fc0:	b510      	push	{r4, lr}
 8000fc2:	460c      	mov	r4, r1
 8000fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fc8:	f000 f8a0 	bl	800110c <_read_r>
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	bfab      	itete	ge
 8000fd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8000fd4:	181b      	addge	r3, r3, r0
 8000fd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000fda:	bfac      	ite	ge
 8000fdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8000fde:	81a3      	strhlt	r3, [r4, #12]
 8000fe0:	bd10      	pop	{r4, pc}

08000fe2 <__swrite>:
 8000fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fe6:	461f      	mov	r7, r3
 8000fe8:	898b      	ldrh	r3, [r1, #12]
 8000fea:	05db      	lsls	r3, r3, #23
 8000fec:	4605      	mov	r5, r0
 8000fee:	460c      	mov	r4, r1
 8000ff0:	4616      	mov	r6, r2
 8000ff2:	d505      	bpl.n	8001000 <__swrite+0x1e>
 8000ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f000 f868 	bl	80010d0 <_lseek_r>
 8001000:	89a3      	ldrh	r3, [r4, #12]
 8001002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800100a:	81a3      	strh	r3, [r4, #12]
 800100c:	4632      	mov	r2, r6
 800100e:	463b      	mov	r3, r7
 8001010:	4628      	mov	r0, r5
 8001012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001016:	f000 b817 	b.w	8001048 <_write_r>

0800101a <__sseek>:
 800101a:	b510      	push	{r4, lr}
 800101c:	460c      	mov	r4, r1
 800101e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001022:	f000 f855 	bl	80010d0 <_lseek_r>
 8001026:	1c43      	adds	r3, r0, #1
 8001028:	89a3      	ldrh	r3, [r4, #12]
 800102a:	bf15      	itete	ne
 800102c:	6560      	strne	r0, [r4, #84]	; 0x54
 800102e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001036:	81a3      	strheq	r3, [r4, #12]
 8001038:	bf18      	it	ne
 800103a:	81a3      	strhne	r3, [r4, #12]
 800103c:	bd10      	pop	{r4, pc}

0800103e <__sclose>:
 800103e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001042:	f000 b813 	b.w	800106c <_close_r>
	...

08001048 <_write_r>:
 8001048:	b538      	push	{r3, r4, r5, lr}
 800104a:	4d07      	ldr	r5, [pc, #28]	; (8001068 <_write_r+0x20>)
 800104c:	4604      	mov	r4, r0
 800104e:	4608      	mov	r0, r1
 8001050:	4611      	mov	r1, r2
 8001052:	2200      	movs	r2, #0
 8001054:	602a      	str	r2, [r5, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	f7ff fa93 	bl	8000582 <_write>
 800105c:	1c43      	adds	r3, r0, #1
 800105e:	d102      	bne.n	8001066 <_write_r+0x1e>
 8001060:	682b      	ldr	r3, [r5, #0]
 8001062:	b103      	cbz	r3, 8001066 <_write_r+0x1e>
 8001064:	6023      	str	r3, [r4, #0]
 8001066:	bd38      	pop	{r3, r4, r5, pc}
 8001068:	200000b4 	.word	0x200000b4

0800106c <_close_r>:
 800106c:	b538      	push	{r3, r4, r5, lr}
 800106e:	4d06      	ldr	r5, [pc, #24]	; (8001088 <_close_r+0x1c>)
 8001070:	2300      	movs	r3, #0
 8001072:	4604      	mov	r4, r0
 8001074:	4608      	mov	r0, r1
 8001076:	602b      	str	r3, [r5, #0]
 8001078:	f7ff fa9f 	bl	80005ba <_close>
 800107c:	1c43      	adds	r3, r0, #1
 800107e:	d102      	bne.n	8001086 <_close_r+0x1a>
 8001080:	682b      	ldr	r3, [r5, #0]
 8001082:	b103      	cbz	r3, 8001086 <_close_r+0x1a>
 8001084:	6023      	str	r3, [r4, #0]
 8001086:	bd38      	pop	{r3, r4, r5, pc}
 8001088:	200000b4 	.word	0x200000b4

0800108c <_fstat_r>:
 800108c:	b538      	push	{r3, r4, r5, lr}
 800108e:	4d07      	ldr	r5, [pc, #28]	; (80010ac <_fstat_r+0x20>)
 8001090:	2300      	movs	r3, #0
 8001092:	4604      	mov	r4, r0
 8001094:	4608      	mov	r0, r1
 8001096:	4611      	mov	r1, r2
 8001098:	602b      	str	r3, [r5, #0]
 800109a:	f7ff fa99 	bl	80005d0 <_fstat>
 800109e:	1c43      	adds	r3, r0, #1
 80010a0:	d102      	bne.n	80010a8 <_fstat_r+0x1c>
 80010a2:	682b      	ldr	r3, [r5, #0]
 80010a4:	b103      	cbz	r3, 80010a8 <_fstat_r+0x1c>
 80010a6:	6023      	str	r3, [r4, #0]
 80010a8:	bd38      	pop	{r3, r4, r5, pc}
 80010aa:	bf00      	nop
 80010ac:	200000b4 	.word	0x200000b4

080010b0 <_isatty_r>:
 80010b0:	b538      	push	{r3, r4, r5, lr}
 80010b2:	4d06      	ldr	r5, [pc, #24]	; (80010cc <_isatty_r+0x1c>)
 80010b4:	2300      	movs	r3, #0
 80010b6:	4604      	mov	r4, r0
 80010b8:	4608      	mov	r0, r1
 80010ba:	602b      	str	r3, [r5, #0]
 80010bc:	f7ff fa97 	bl	80005ee <_isatty>
 80010c0:	1c43      	adds	r3, r0, #1
 80010c2:	d102      	bne.n	80010ca <_isatty_r+0x1a>
 80010c4:	682b      	ldr	r3, [r5, #0]
 80010c6:	b103      	cbz	r3, 80010ca <_isatty_r+0x1a>
 80010c8:	6023      	str	r3, [r4, #0]
 80010ca:	bd38      	pop	{r3, r4, r5, pc}
 80010cc:	200000b4 	.word	0x200000b4

080010d0 <_lseek_r>:
 80010d0:	b538      	push	{r3, r4, r5, lr}
 80010d2:	4d07      	ldr	r5, [pc, #28]	; (80010f0 <_lseek_r+0x20>)
 80010d4:	4604      	mov	r4, r0
 80010d6:	4608      	mov	r0, r1
 80010d8:	4611      	mov	r1, r2
 80010da:	2200      	movs	r2, #0
 80010dc:	602a      	str	r2, [r5, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	f7ff fa8f 	bl	8000602 <_lseek>
 80010e4:	1c43      	adds	r3, r0, #1
 80010e6:	d102      	bne.n	80010ee <_lseek_r+0x1e>
 80010e8:	682b      	ldr	r3, [r5, #0]
 80010ea:	b103      	cbz	r3, 80010ee <_lseek_r+0x1e>
 80010ec:	6023      	str	r3, [r4, #0]
 80010ee:	bd38      	pop	{r3, r4, r5, pc}
 80010f0:	200000b4 	.word	0x200000b4

080010f4 <__malloc_lock>:
 80010f4:	4801      	ldr	r0, [pc, #4]	; (80010fc <__malloc_lock+0x8>)
 80010f6:	f7ff be0d 	b.w	8000d14 <__retarget_lock_acquire_recursive>
 80010fa:	bf00      	nop
 80010fc:	200000a8 	.word	0x200000a8

08001100 <__malloc_unlock>:
 8001100:	4801      	ldr	r0, [pc, #4]	; (8001108 <__malloc_unlock+0x8>)
 8001102:	f7ff be08 	b.w	8000d16 <__retarget_lock_release_recursive>
 8001106:	bf00      	nop
 8001108:	200000a8 	.word	0x200000a8

0800110c <_read_r>:
 800110c:	b538      	push	{r3, r4, r5, lr}
 800110e:	4d07      	ldr	r5, [pc, #28]	; (800112c <_read_r+0x20>)
 8001110:	4604      	mov	r4, r0
 8001112:	4608      	mov	r0, r1
 8001114:	4611      	mov	r1, r2
 8001116:	2200      	movs	r2, #0
 8001118:	602a      	str	r2, [r5, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	f7ff fa14 	bl	8000548 <_read>
 8001120:	1c43      	adds	r3, r0, #1
 8001122:	d102      	bne.n	800112a <_read_r+0x1e>
 8001124:	682b      	ldr	r3, [r5, #0]
 8001126:	b103      	cbz	r3, 800112a <_read_r+0x1e>
 8001128:	6023      	str	r3, [r4, #0]
 800112a:	bd38      	pop	{r3, r4, r5, pc}
 800112c:	200000b4 	.word	0x200000b4

08001130 <_init>:
 8001130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001132:	bf00      	nop
 8001134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001136:	bc08      	pop	{r3}
 8001138:	469e      	mov	lr, r3
 800113a:	4770      	bx	lr

0800113c <_fini>:
 800113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113e:	bf00      	nop
 8001140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001142:	bc08      	pop	{r3}
 8001144:	469e      	mov	lr, r3
 8001146:	4770      	bx	lr
